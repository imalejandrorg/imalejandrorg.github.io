[["estadística-descriptiva.html", "Lección 2 Estadística descriptiva 2.1 Medidas de tendencia central 2.2 Medidas de dispersión 2.3 Medidas de posición relativa 2.4 El uso de la librería dplyr", " Lección 2 Estadística descriptiva En esta lección veremos las nociones básicas de estadística descriptiva haciendo uso de R y RStudio. Veremos medidas de tendencia central como la media, mediana y moda, medidas de dispersión como el rango o la desviación estándar y medidas de posición relativa como los valores Z. 2.1 Medidas de tendencia central Sirven para describir los valores del centro o valores medios de algún conjunto de datos. Las tres medidas de tendencia central más utilizadas son: media, mediana y moda. 2.1.1 Media Mide el promedio del valor de nuestros datos. Se calcula como la suma de los valores de las observaciones dividida entre el número de observaciones. Es representada como \\(\\overline{x}\\) (pronunciado \\(x\\) barra) para datos muestrales y \\(\\mu\\) (pronunciado mu) para datos poblacionales. Para obtener la media muestral utilizamos la ecuación (2.1) y para obtener la media poblacional se utiliza la ecuación (2.2). \\[\\begin{equation} \\overline{x} = \\frac{\\sum_{i = 1}^{n}{x_i}}{n} \\tag{2.1} \\end{equation}\\] \\[\\begin{equation} \\mu = \\frac{\\sum_{i = 1}^{N}{x_i}}{N} \\tag{2.2} \\end{equation}\\] Donde \\(\\sum_{i=1}^{n}{x_i}\\) y \\(\\sum_{i=1}^{N}{x_i}\\) representan la sumatoria de los valores de todas nuestras observaciones; \\(n\\) y \\(N\\) representan el número de valores de datos en una muestra y el número de valores totales en una población, respectivamente. Propiedades importantes de la media: No es un estadístico robusto, ya que es sensible a valores extremadamente grandes o pequeños. Utiliza todos los datos disponibles. Las medias muestrales (\\(\\overline{x}\\)) de una población tienden a variar menos que otras medidas. 2.1.1.1 Media en R El calculo de la media en R es algo sencillo. Para esto, utilizamos la función mean(). Ejemplo: En un experimento se administraron distintos tratamientos a un grupo de plantas y se midió el peso seco de todas ellas. Supongamos que queremos saber cuál fue la media global para todos los pesos (independientemente del tratamiento). Se utilizará la base de datos PlantGrowth para este ejemplo. data(&quot;PlantGrowth&quot;) Es importante que conozcamos los datos que incluye nuestra matriz. En este caso tenemos dos columnas, weight que hace referencia al peso seco y group que hace referencia al tratamiento. Para sacar la media global (independiente del tratamiento) simplemente escribimos la función mean() y hacemos referencia al peso con el símbolo $. mean(PlantGrowth$weight) ## [1] 5.073 Lo que nos arroja una media de 5.073. Ahora en caso de que quisiéramos sacar la media de por cada uno de los tratamientos tenemos que usar filtros y agrupaciones, para esto podemos utilizar la librería dplyr que viene incluida en el paquete de tidyverse. Vamos a usar el pipeline %&gt;% de dplyr para hacer varias operaciones en cadena: 1) Utilizamos la función group_by(group) para agrupar nuestros datos por el tipo de tratamiento; 2) utilizamos la función summarise(Media = mean(weight), n = n()) para indicar que saque la media de nuestro datos YA agrupados y el número de observaciones de cada grupo. library(tidyverse) resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(Media = mean(weight), n = n()) resumen ## # A tibble: 3 x 3 ## group Media n ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 5.03 10 ## 2 trt1 4.66 10 ## 3 trt2 5.53 10 Al final obtenemos una matriz nueva con 3 columnas: tipo de tratamiento, media para cada tratamiento y número de observaciones para cada tipo de tratamiento. 2.1.2 Mediana Es el valor que se encuentra justo por la mitad de la distribución de nuestros datos. Se respresenta por el símbolo \\(\\tilde{x}\\) (pronunciado \\(x\\) tilde). \\[ 1, 2, 3, 4, 5 \\] Para el conjunto de datos anteriores la mediana es igual al número 3 que se encuentra justo por la mitad de los datos. En caso de tener un número par de observaciones, la mediana se puede calcular como un promedio de los dos valores centrales. Por ejemplo. \\[ 5, 6, 7, 8, 9, 10 \\] Para este caso nuestros valores centrales son 7 y 8. Estos simplemente se promedian. \\[ \\tilde{x} = \\frac{7 + 8}{2} = 7.5 \\] Propiedades importantes de la mediana: No cambia al añadir valores extremos por lo que se le considera un estadístico robusto. No utiliza todo el conjunto de datos. 2.1.2.1 Mediana en R Para el calculo de la mediana se utiliza la función median(). Ejemplo: Supongamos que con los datos del ejemplo anterior queremos ahora calcular la mediana global y la mediana para cada uno de nuestros tratamientos. median(PlantGrowth$weight) ## [1] 5.155 El valor obtenido es de 5.155. De manera similar podemos calcular la mediana para cada uno de nuestros datos utilizando dplyr. resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(Mediana = median(weight), n = n()) resumen ## # A tibble: 3 x 3 ## group Mediana n ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 5.15 10 ## 2 trt1 4.55 10 ## 3 trt2 5.44 10 Si lo deséamos, podemos obtener la media y la mediana en una misma tabla. resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(Media = mean(weight), Mediana = median(weight), n = n()) resumen ## # A tibble: 3 x 4 ## group Media Mediana n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 5.03 5.15 10 ## 2 trt1 4.66 4.55 10 ## 3 trt2 5.53 5.44 10 2.1.3 Moda Es el valor que más se repite en un conjunto de datos. Propiedades importantes de la moda: Se puede aplicar a datos cualitativos. Puede existir una moda (unimodal), dos modas (bimodal), múltiples modas (multimodal) o ninguna moda. Sin embargo, casi no se utiliza en estadística y por lo mismo no hablaremos más de ella. Como tal no existe una función en R que calcule la moda pero en varias páginas y foros como StackOverflow se pueden encontrar scripts para su calculo. 2.2 Medidas de dispersión A diferencia de los estadísticos de tendencia central, los estadísticos de dispersión se basan en cómo se distribuyen los datos y qué tan esparcidos están. Las medidas que veremos son: rango y desviación estándar. 2.2.1 Rango Es la diferencia entre el valor máximo y mínimo de datos como se observa en la ecuación (2.3) \\[\\begin{equation} Rango = x_{max} - x_{max} \\tag{2.3} \\end{equation}\\] Propiedades importante del rango: Es muy sensible a valores extremos. No toma en cuenta todos los valores, no refleja la variación de todos los datos. 2.2.1.1 Rango en R Se utiliza la función range(). Ejemplo: Queremos calcular el rango de las observaciones de la base de datos de plantas que utilizamos en la sección de medidas de tendencia central. range(PlantGrowth$weight) ## [1] 3.59 6.31 Esto nos da como resultado el valor máximo y el valor mínimo pero no nos dice cuál es el valor de nuestro rango. Podríamos hacer una operación simple para su calculo o utilizar las funciones max() y min(). max(PlantGrowth$weight) - min(PlantGrowth$weight) ## [1] 2.72 Como podemos ver el rango es de 2.72 ya que la diferencia entre 6.31 y 3.59 corresponde a este vakir, Para sacar el valor máximo y mínimo de cada uno de los tratamientos podemos utilizar el paquete de dplyr y la función group_by(). resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(Rango = max(weight) - min(weight), n = n()) resumen ## # A tibble: 3 x 3 ## group Rango n ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 1.94 10 ## 2 trt1 2.44 10 ## 3 trt2 1.39 10 Igualmente, podemos agregar las medidas de tendencia central. resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(Rango = max(weight) - min(weight), Media = mean(weight), Mediana = median(weight), n = n()) resumen ## # A tibble: 3 x 5 ## group Rango Media Mediana n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 1.94 5.03 5.15 10 ## 2 trt1 2.44 4.66 4.55 10 ## 3 trt2 1.39 5.53 5.44 10 2.2.2 Desviación estándar Mide qué tanto se desvían los valores de los datos de la media. Es representada por el símbolo \\(s\\) para datos muestrales y se calcula con la ecuación (2.4) y \\(\\sigma\\) para datos poblacionales y se calcula a partir de la ecuación (2.5). \\[\\begin{equation} s = \\sqrt{\\frac{\\sum_{i = 1}^{n}( {x_i-\\overline{x} ) ^2}}{n-1}} \\tag{2.4} \\end{equation}\\] \\[\\begin{equation} \\sigma = \\sqrt{\\frac{\\sum_{i = 1}^{n}( {x_i-\\overline{x} ) ^2}}{N}} \\tag{2.5} \\end{equation}\\] Donde \\(\\sum_{i = 1}^{n}({x_i-\\overline{x})^2}\\) es igual al valor cada observación menos la media, elevado al cuadrado, \\({n-1}\\) corresponde a los grados de libertad que tenemos para el cálculo de la desviación estándar y \\(N\\) es el número total de la población. Propiedades importantes de la desviación estándar: Nunca tiene un valor negativo. Mayor valor de \\(s\\) indica mayor variación en los datos. Puede aumentar considerablemente con valores atípicos, es decir, no es robusta. Las unidades de la desviación estándar son iguales a las unidades de los datos originales. 2.2.2.1 Desviación estándar en R Se utiliza la función sd(). Ejemplo: Queremos calcular la desviación estándar de las observaciones de la base de datos de plantas que utilizamos en la sección del rango. sd(PlantGrowth$weight) ## [1] 0.7011918 Obtenemos una desviación estándar de 0.7011918 para todo el conjunto de datos. En caso de querer calcular la desviación estándar de cada tratamiento utilizamos el paquete de dplyr y group_by(). resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(SD = sd(weight)) resumen ## # A tibble: 3 x 2 ## group SD ## &lt;fct&gt; &lt;dbl&gt; ## 1 ctrl 0.583 ## 2 trt1 0.794 ## 3 trt2 0.443 Y de nueva cuenta, podemos agregar el resto de estadísticos descriptivos que hemos visto hasta ahora. resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(SD = sd(weight), Rango = max(weight) - min(weight), Media = mean(weight), Mediana = median(weight), n = n()) resumen ## # A tibble: 3 x 6 ## group SD Rango Media Mediana n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 0.583 1.94 5.03 5.15 10 ## 2 trt1 0.794 2.44 4.66 4.55 10 ## 3 trt2 0.443 1.39 5.53 5.44 10 En esta tabla podemos ver todos lo estadísticos que hemos calculado hasta ahora. Algo importante a tener en cuenta es que sd() calcula la desviación estandar muestral \\(s\\), no la poblacional \\(\\sigma\\). Para calcular \\(\\sigma\\) necesitamos multiplicar el resultado obtenido por \\(\\sqrt\\frac{N-1}{N}\\). sd(PlantGrowth$weight)*(sqrt((length(PlantGrowth$weight)-1)/length(PlantGrowth$weight))) ## [1] 0.6894063 En caso de que se utilice frecuentemente la \\(\\sigma\\) se puede definir la función de la siguiente manera. sd.p = function(x){sd(x)*sqrt((length(x)-1)/length(x))} Para calcular la varianza \\(s^2\\), simplemente elevamos al cuadrado el valor obtenido de la desviación estándar, se calcula con la siguiente ecuación (2.6). \\[\\begin{equation} Varianza = {s}^2 \\tag{2.6} \\end{equation}\\] sd(PlantGrowth$weight)^2 ## [1] 0.49167 Propiedades importantes de la varianza: Las unidades están elevadas al cuadrado. No es un estadístico robusto. Nunca tiene valores negativos. Otro estadístico que nos puede interesare es el coeficiente de variación que se obtiene a partir de la ecuación (2.7). \\[\\begin{equation} CV = \\frac{S}{\\overline{x}}*100 \\tag{2.7} \\end{equation}\\] Para su calculo simplemente utilizamos las funciones previamente aprendidas. sd(PlantGrowth$weight)/mean(PlantGrowth$weight)*100 ## [1] 13.82204 Nusetro resultado es 13.82204%. Este es el coeficiente de variación para todos los datos. De nueva cuenta, todo esto puede ser integrado en una sola tabla con la función summarise()del paquete dplyr. resumen &lt;- resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(CV = sd(weight)/mean(weight)*100, Varianza = sd(weight)^2, SD = sd(weight), Rango = max(weight) - min(weight), Media = mean(weight), Mediana = median(weight), n = n()) resumen ## # A tibble: 3 x 8 ## group CV Varianza SD Rango Media Mediana n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 11.6 0.340 0.583 1.94 5.03 5.15 10 ## 2 trt1 17.0 0.630 0.794 2.44 4.66 4.55 10 ## 3 trt2 8.01 0.196 0.443 1.39 5.53 5.44 10 2.3 Medidas de posición relativa Indican la posición relativa de los datos con respecto de los demás datos. Algunas de las más usadas son: valores Z, frecuencia absoluta, frecuencia relativa y cuartiles. 2.3.1 Valores Z Se obtienen al estandarizar los valores de nuestros datos. Es el número de desviaciones estándar a las que se encuentra un valor dado. Se puede calcular el valor z muestral y poblacional con las ecuaciones (2.8) y (2.9). \\[\\begin{equation} z = \\frac{x - \\overline{x}}{s} \\tag{2.8} \\end{equation}\\] \\[\\begin{equation} z = \\frac{x - \\mu}{\\sigma} \\tag{2.9} \\end{equation}\\] Propiedades importantes de los valores Z: No tienen unidades de medida. Si un valor es menor que la media, su valor Z será negativo. 2.3.1.1 Valores Z en R Para el calculo del valor Z de algún número simplemente le extraemos la media \\(\\overline{x}\\) y lo dividimos entre la desviación estándar \\(s\\). Podemos agregar una sección que contenga el valor Z de cada uno de nuestros datos. PlantGrowth$Z &lt;- (PlantGrowth$weight - mean(PlantGrowth$weight)) / sd(PlantGrowth$weight) Podemos utilizar la función de mutate() del paquete de dplyr para agregar una nueva sección a nuestra base de datos de PlantGrowth. Al utilizar la función group_by() antes de la función mutate() nos aseguramos de que los valores Z se calculen con la media y la desviación estándar de cada tratamiento y no con la media y desviación estándar resultante de todo el conjunto de datos. PlantGrowth &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% mutate(Z = (weight - mean(weight)/sd(weight))) 2.3.2 Frecuencia absoluta Es el valor total de los datos observados. Por ejemplo, para los tratamientos de la base de datos de PlantGrowth, podemos ver que cada tratamiento tuvo 10 plantas en observación. La frecuencia de cada tratamiento es por ende de 10. Otra situación es el número de veces que cada peso aparece. Por ejemplo, el valor de 4.17 aparece dos veces en los datos, por lo tanto su frecuencia absoluta es de 2. 2.3.2.1 Frecuencia absoluta en R Utilizamos la función table() para su calculo. table(PlantGrowth$group) ## ## ctrl trt1 trt2 ## 10 10 10 Aquí se puede ver que cada tratamiento se realizo con 10 plantas. Ahora si quisieramos ver en los pesos cuántas veces se repite cada valor, lo haríamos por la variable de weight. table(PlantGrowth$weight) ## ## 3.59 3.83 4.17 4.32 4.41 4.5 4.53 4.61 4.69 4.81 4.89 4.92 5.12 5.14 5.17 5.18 ## 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 ## 5.26 5.29 5.33 5.37 5.5 5.54 5.58 5.8 5.87 6.03 6.11 6.15 6.31 ## 1 1 1 1 1 1 1 1 1 1 1 1 1 Y como podemos confirmar, el valor 4.17 es el único que se repite 2 veces. Aparecen los valores de cada uno de nuestros datos y la frecuencia con la que se repiten. En este caso obtuvimos la frecuencia de cada uno de los tratamientos. Como podemos ver, \\(N = 30\\) y cada tratamiento esta compuesto por 10 observaciones. Otra opción es el uso de la función n() junto con group_by(). De hecho, hemos incluido este valor en nuestra tabla de resumen desde un inicio. resumen &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% summarise(CV = sd(weight)/mean(weight)*100, Varianza = sd(weight)^2, SD = sd(weight), Rango = max(weight) - min(weight), Media = mean(weight), Mediana = median(weight), Frec_Absoluta = n()) resumen ## # A tibble: 3 x 8 ## group CV Varianza SD Rango Media Mediana Frec_Absoluta ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 ctrl 11.6 0.340 0.583 1.94 5.03 5.15 10 ## 2 trt1 17.0 0.630 0.794 2.44 4.66 4.55 10 ## 3 trt2 8.01 0.196 0.443 1.39 5.53 5.44 10 2.3.3 Frecuencia relativa Es el valor relativo de cada dato respecto del total como se observa en la ecuación (2.10). Si se le multiplica por 100% se obtiene su valor en porcentaje. \\[\\begin{equation} f_i = \\frac{n_i}{N} \\tag{2.10} \\end{equation}\\] Donde \\(f_i\\) es la frecuencia de la i-ésima observación y \\(n_i\\) es el número de observaciones en la i-ésima observación. 2.3.3.1 Frecuencia relativa en R En este caso utilizamos la función prop.table(). frec &lt;- table(PlantGrowth$group) prop.table(frec) ## ## ctrl trt1 trt2 ## 0.3333333 0.3333333 0.3333333 En este caso obtenemos la frecuencia relativa de cada una de las observaciones de los tratamientos. Como cada una era 10 y \\(N = 30\\) cada una tiene una frecuencia relativa de 0.3333 o 33.33%. Ahora las frecuencias relativas para cada uno de nuestros pesos sería de la siguiente manera. frec2 &lt;- table(PlantGrowth$weight) prop.table(frec2) ## ## 3.59 3.83 4.17 4.32 4.41 4.5 4.53 ## 0.03333333 0.03333333 0.06666667 0.03333333 0.03333333 0.03333333 0.03333333 ## 4.61 4.69 4.81 4.89 4.92 5.12 5.14 ## 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 ## 5.17 5.18 5.26 5.29 5.33 5.37 5.5 ## 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 ## 5.54 5.58 5.8 5.87 6.03 6.11 6.15 ## 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 0.03333333 ## 6.31 ## 0.03333333 Y como podemos ver, la frecuencia del valor 4.17 es el doble que las del resto, lo que quiere decir que este valor se repite 2 veces. De nueva cuenta, otra opción es el uso de la función mutate() para agregar una sección de frecuencia relativa a nuestra tabla con los estadísticos descriptivos pasados. resumen &lt;- resumen %&gt;% mutate(Frec_Relativa = Frec_Absoluta / sum(Frec_Absoluta)) resumen ## # A tibble: 3 x 9 ## group CV Varianza SD Rango Media Mediana Frec_Absoluta Frec_Relativa ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 ctrl 11.6 0.340 0.583 1.94 5.03 5.15 10 0.333 ## 2 trt1 17.0 0.630 0.794 2.44 4.66 4.55 10 0.333 ## 3 trt2 8.01 0.196 0.443 1.39 5.53 5.44 10 0.333 2.3.4 Cuartiles Son medidas que dividen el conjunto de datos en cuatro grupos, con 25% de los valores en cada uno de ellos. Se representan por los símbolos \\(Q_1\\), \\(Q_2\\) y \\(Q_3\\), para el primer, segundo y tercer cuartil. \\(Q_2\\) es equivalente a la mediana. Existen otros estadísticos que pueden ser calculados a partir de los cuartiles como el Rango Intercuartil (\\(RIQ\\)) como se indica en la siguiente fórmula. \\[\\begin{equation} RIQ = Q_3 - Q_1 \\tag{2.11} \\end{equation}\\] 2.3.4.1 Cuartiles en R Para el calculo de los cuartiles en R podemos utilizar la función summary() que viene en los paquetes básicos de R. summary(PlantGrowth) ## weight group Z ## Min. :3.590 ctrl:10 Min. :-7.5661 ## 1st Qu.:4.550 trt1:10 1st Qu.:-6.5986 ## Median :5.155 trt2:10 Median :-3.4749 ## Mean :5.073 Mean :-3.9232 ## 3rd Qu.:5.530 3rd Qu.:-1.7877 ## Max. :6.310 Max. : 0.1573 Como podemos ver, esta función nos da los valores mínimos, máximos, el \\(Q_1\\), \\(Q_3\\), la mediana y la media. Los cinco números utilizados para generar gráfica de caja se encuentran en estos datos. Para sacar estos valores por cada uno de los datos podemos utilizar la función filter() del paquete dplyr. ctrl &lt;- PlantGrowth %&gt;% dplyr::filter(group == &quot;ctrl&quot;) trt1 &lt;- PlantGrowth %&gt;% dplyr::filter(group == &quot;trt1&quot;) trt2 &lt;- PlantGrowth %&gt;% dplyr::filter(group == &quot;trt2&quot;) summary(ctrl) ## weight group Z ## Min. :4.170 ctrl:10 Min. :-4.460 ## 1st Qu.:4.550 trt1: 0 1st Qu.:-4.080 ## Median :5.155 trt2: 0 Median :-3.475 ## Mean :5.032 Mean :-3.598 ## 3rd Qu.:5.293 3rd Qu.:-3.337 ## Max. :6.110 Max. :-2.520 summary(trt1) ## weight group Z ## Min. :3.590 ctrl: 0 Min. :-2.2827 ## 1st Qu.:4.207 trt1:10 1st Qu.:-1.6652 ## Median :4.550 trt2: 0 Median :-1.3227 ## Mean :4.661 Mean :-1.2117 ## 3rd Qu.:4.870 3rd Qu.:-1.0027 ## Max. :6.030 Max. : 0.1573 summary(trt2) ## weight group Z ## Min. :4.920 ctrl: 0 Min. :-7.566 ## 1st Qu.:5.268 trt1: 0 1st Qu.:-7.219 ## Median :5.435 trt2:10 Median :-7.051 ## Mean :5.526 Mean :-6.960 ## 3rd Qu.:5.735 3rd Qu.:-6.751 ## Max. :6.310 Max. :-6.176 2.3.4.2 Valores atípicos Son aquellos valores que se encuentran por encima de \\(Q_3 + 1.5 * RIQ\\) o debajo de \\(Q_1 - 1.5 * RIQ\\). Con estos valores se pueden realizar gráficas de cajas modificadas. 2.3.4.2.1 Gráfica de cajas en R Utilizaremos la paquetería ggplot2 que está incluido en el paquete tidyverse. library(ggplot2) Utilizamos la función ggplot() + geom_boxplot. ggplot(PlantGrowth) + geom_boxplot(aes(group, weight, fill = group)) + xlab(&quot;Grupo&quot;) + ylab(&quot;Peso&quot;) + scale_fill_discrete(name = &quot;Tratamientos&quot;, labels = c(&quot;Control&quot;, &quot;Tratamiento 1&quot;, &quot;Tratamiento 2&quot;)) + theme_classic() Figura 2.1: Gráfica de cajas modificada para la identificación de valores atípicos. Como podemos ver en la gráfica, el tratamiento 1 presenta dos valores atípicos que están por encima del valor \\(Q_3 + 1.5 * IQR\\). 2.4 El uso de la librería dplyr A lo largo de todo esta lección hemos hecho uso de la librería dplyr. Este paquete está incluido dentro de la librería tidyverse. library(tidyverse) La mayoría de estas funciones las hemos estado utilizando a lo largo de esta sección aunque puede que haya algunas que no hayamos aplicado. Las funciones más importantes de este paquete son: group_by: agrupa datos. summarize o summarise: resumen de datos agrupados. filter: encuentra filas con ciertas condiciones. select: junto a starts_with, ends_with o contains mutate: genera nuevas variables. %&gt;%: pipeline. arrange: ordena. Con la función select podemos elegir unas cuantas variables para trabajar. Esto es útil para bases de datos con muchas variables como matrices de abundancias. resumen %&gt;% dplyr::select(group, Media, SD) ## # A tibble: 3 x 3 ## group Media SD ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ctrl 5.03 0.583 ## 2 trt1 4.66 0.794 ## 3 trt2 5.53 0.443 En este caso, solamente nos interesa trabajar con la media y la desviación estándar de nuestros tratamientos. Otra forma de seleccionar las variables es con el argumento starts_with(), por ejemplo, para la selección de los datos del grupo control. PlantGrowth %&gt;% dplyr::select(starts_with(&quot;ctrl&quot;), weight) ## Adding missing grouping variables: `group` ## # A tibble: 30 x 2 ## # Groups: group [3] ## group weight ## &lt;fct&gt; &lt;dbl&gt; ## 1 ctrl 4.17 ## 2 ctrl 5.58 ## 3 ctrl 5.18 ## 4 ctrl 6.11 ## 5 ctrl 4.5 ## 6 ctrl 4.61 ## 7 ctrl 5.17 ## 8 ctrl 4.53 ## 9 ctrl 5.33 ## 10 ctrl 5.14 ## # ... with 20 more rows Como podemos ver, esto despliega los datos de peso seco solamente del grupo de control. También podemos ordenar los datos utilizando la función arrange(). Es importante escribir el argumento .by_group = TRUE para que la función arrange() respete el agrupamiento que hicimos por tratamientos antes del pipeline %&gt;%. PlantGrowth &lt;- PlantGrowth %&gt;% group_by(group) %&gt;% arrange(desc(weight), .by_group = TRUE) "]]
