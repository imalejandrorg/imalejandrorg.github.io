[["index.html", "Análisis de Varianza Requisitos 0.1 Descarga de R y RStudio", " Análisis de Varianza Alejandro Ruiz-García 16/3/2021 Requisitos Antes de comenzar con el curso es necesario que descarguemos ciertos programas entre ellos están incluidos R y RStudio. 0.1 Descarga de R y RStudio Tenemos que distinguir entre R y RStudio. Como tal, R es el lenguaje de programación y RStudio es el ambiente de trabajo donde utilizamos este lenguaje de programación. Para descargar R podemos acceder al link de esta página. Una vez descargado e instalado R, procedemos a descargar RStudio desde esta página. Con estas herramientas podemos comenzar a trabajar en RStudio. "],["introducción-a-r.html", "Lección 1 Introducción a R 1.1 Interfaz 1.2 Creando nuestro primer proyecto 1.3 Objetos y variables 1.4 Instalar paquetes 1.5 Importar datos a R 1.6 Comentarios 1.7 Exportar datos 1.8 Pedir ayuda", " Lección 1 Introducción a R En esta lección veremos las nociones más básicas de R y RStudio, cómo escribir tablas, cómo importar datos, entre otras cosas. 1.1 Interfaz R Studio cuenta con 4 ventanas esenciales: La consola, que es donde se ejecutan los comandos y se visualizan los outputs de nuestros análisis. Los scripts, que corresponde a la ventana superior izquierda. No solamente se visualizan scripts, también se pueden trabajar otros formatos, aunque generalmente será donde nosotros escribamos los comandos que la consola va a ejecutar. El Envirnoment y el History que corresponden a la ventana superior derecha, aunque también cuenta con otras herramientas útiles como Build y Git que se utilizan en cuestiones más avanzadas. Los Files, Packages y Plots así como la ventana de Help que corresponden a la esquina inferior derecha. Básicamente estas son las 4 pestañas de esta ventana que estaremos utilizando. Figura 1.1: Interfaz de RStudio Adicionalmente, en la ventana de Tools -&gt; Global Options -&gt; Appearance podemos configurar los colores de nuestra interfaz, el tamaño de la fuente, el zoom, el tema del editor y la tipografía. Figura 1.2: Para abrir las opciones globales nos vamos a Tools -&gt; Global Options. Figura 1.3: Ventana de Appearance dentro de las Opciones Globales de RStudio Personalmente encuentro los colores oscuros más cómodos para trabajar, por eso elegí el tema Material. 1.2 Creando nuestro primer proyecto Una vez que nos familiarizamos con la interfaz, es momento de crear nuestro primer proyecto. Para esto, debemos dar clic en File -&gt; New Project para que nos aparezca una ventana como la siguiente. Figura 1.4: Ventana para crear un nuevo proyecto a partir de distintas opciones: Nuevo directorio, directorio existente y versión de control. Creamos un nuevo directorio que se guarda por defecto en la carpeta de Documentos de nuestro ordenador. SE RECOMIENDA NO DEJAR ESPACIOS EN EL NOMBRE. En su lugar, podemos utilizar guión bajo (_), el símbolo de menos (-) o un punto (.). Una vez creado nuestro proyecto, vamos a crear un nuevo archivo script tecleando Ctrl + Shift + N. Deberíamos tener un ambiente de trabajo más o menos así. Figura 1.5: Ventana con el ambiente de trabajo básico en RStudio. Otra recomendación es guardar nuestro script en la misma carpeta del proyecto, así como las bases de datos y demás archivos que vayamos a utilizar. Para saber cuál es la carpeta de nuestro proyecto, podemos teclear el siguiente comando en la consola. getwd() ## [1] &quot;O:/Tesis/R/Webpage/imalejandrorg.github.io/Curso_R_basico&quot; Para cambiar el directorio de trabajo, simplemente tecleamos en la consola la siguiente función. setwd(&quot;O:/Documentos/R_Basico&quot;) getwd() ## [1] &quot;O:/Documentos/R_Basico&quot; De esta manera cambiamos el directorio de nuestro proyecto actual y sabemos en qué carpeta ingresar nuestros archivos. Para guardar nuestro script simplemente hacemos clic en icono del disquete o con las teclas Ctrl + S. Recuerda que es recomendable guardar el script en la misma carpeta que nuestro proyecto. 1.3 Objetos y variables Para que un comando que queramos ejecutar permanezca almacenado, debemos asignar un nombre al resultado. La manera en la que R hace esto es a través de los símbolos &lt;- o = (cuyo atajo de escritura es Alt + -). Por ejemplo, si queremos realizar una suma de 5 + 5 pondríamos el siguiente código en la consola. 5 + 5 ## [1] 10 Sin embargo, si queremos almacenar este resultado necesitamos nombrar a una variable con este resultado. Por ejemplo, una variable llamada suma. suma &lt;- 5 + 5 suma ## [1] 10 Como podemos ver en ambos casos obtenemos los mismos resultados. Sin embargo, en el segundo caso encontraremos una variable llamada suma en nuestro Environment en el panel superior derecho. Figura 1.6: Panel Environment en el cual podremos encontrar las variables que vayamos generando. En caso de que estemos interesados en asignar valores categóricos, estos deben estar encomillados. letraA &lt;- &quot;A&quot; De nuevo se agregará esta variable a nuestro Environment. Figura 1.7: Tras definir la variable A esta se suma a la ventana de Environment. Para corroborar el tipo de dato que tenemos podemos utilizar la función class(x) donde x es el nombre de nuestra variable. class(letraA) ## [1] &quot;character&quot; class(suma) ## [1] &quot;numeric&quot; Para los análisis de datos de naturaleza biológica normalmente se trabaja con matrices de datos con múltiples caracteres tanto categóricos como cuantitativos, que en R corresponde a un data frame. Por ejemplo, los datos de una matriz llamada dune del paquete vegan corresponde a una matriz de datos. data(&quot;dune&quot;) class(dune) ## [1] &quot;data.frame&quot; Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu Cirsarve Comapalu Eleopalu Elymrepe Empenigr Hyporadi Juncarti Juncbufo Lolipere Planlanc Poaprat Poatriv Ranuflam Rumeacet Sagiproc Salirepe Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp 1 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 7 0 4 2 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 3 4 0 0 0 0 4 0 0 0 0 5 0 4 7 0 0 0 0 5 0 5 0 0 0 0 4 0 7 0 2 0 0 0 0 0 4 0 0 0 0 6 0 5 6 0 0 0 0 2 0 2 0 2 0 0 8 0 2 0 2 3 0 2 0 0 4 0 0 0 0 5 0 4 5 0 0 5 0 2 0 1 0 2 0 2 0 0 0 4 2 2 0 0 0 0 4 0 0 0 0 2 5 2 6 0 5 0 0 3 2 2 0 2 0 2 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 6 5 3 4 0 6 0 0 3 5 5 0 6 0 2 0 0 0 2 0 2 0 0 0 0 0 0 0 0 2 6 5 4 5 0 3 0 0 3 2 2 0 2 0 0 4 0 5 0 0 0 0 0 0 4 0 0 0 4 0 4 0 4 4 2 0 2 0 3 0 2 0 2 0 0 3 0 3 0 0 0 0 0 0 0 6 0 0 4 4 2 0 4 5 0 2 2 0 2 0 3 0 2 0 4 0 0 0 4 2 4 0 0 0 0 0 0 0 0 0 6 3 4 4 0 0 0 0 3 0 6 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 7 3 4 0 0 0 2 0 5 0 3 2 4 0 0 4 0 8 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 4 0 2 4 0 2 0 3 0 4 0 0 5 0 5 0 0 0 1 0 0 0 0 0 0 0 3 0 0 2 9 2 0 2 0 2 0 2 0 0 0 0 4 0 0 0 0 0 0 0 2 4 0 0 0 0 0 0 0 0 0 2 0 0 0 2 0 6 0 0 4 0 4 0 0 0 0 0 0 0 2 5 0 0 0 3 0 0 0 0 0 2 0 0 0 2 0 1 0 4 0 0 7 0 4 0 0 0 0 0 0 8 0 0 0 3 0 0 0 0 2 2 0 0 0 0 0 0 0 4 3 2 0 2 0 4 0 0 0 0 0 0 0 0 2 0 0 0 2 1 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 3 3 0 0 0 0 3 5 0 2 1 6 0 0 0 3 0 4 0 0 0 0 0 0 0 2 5 0 0 0 0 0 0 0 0 3 3 6 0 2 0 3 0 0 5 0 0 0 0 0 0 0 0 4 0 0 0 4 0 0 0 0 0 4 0 0 5 2 0 0 0 4 3 1.4 Instalar paquetes Una de las herramientas más útiles de R es la instalación de paquetes. No tenemos la necesidad de escribir nuestras propias funciones cada que queramos realizar un análisis. En su lugar, bajamos e instalamos paquetes que nos sirven para ciertas funciones. Por ejemplo, uno de los paquetes más utilizados es el de vegan, útil para realizar análisis ecológicos. Para instalar los paquetes escribimos la siguiente función en la consola. install.packages(&quot;vegan&quot;) Tenemos que conocer el nombre exacto del paquete, en este caso, vegan está escrito con una v minúscula. Tenemos que entender que instalar un paquete no es lo mismo que llamarlo. Para esto último utilizamos la siguiente función. library(vegan) Vemos que en esta ocasión llamamos al paquete sin necesidad de poner el entrecomillado. En ocasiones la función install.package() puede arrojarnos error. Una alternativa es utilizar la ventana de Packages del panel inferior derecho. Figura 1.8: Ventana de Packages donde podremos encontrar los paquetes instalados. Damos clic en Install y escribimos el nombre del paquete. Figura 1.9: Al hacer clic sobre el botón Install en la ventana de Packages aparece esta pequeña ventana donde podremos buscar la librería deseada. Nos irán apareciendo opciones con el nombre del paquete de interés. Lo seleccionamos y damos clic en Install. Figura 1.10: En este caso, solo con escribir las primeras letras del paquete deseado se despliega una lista de librerías con nombres similares. 1.5 Importar datos a R La mayor parte del tiempo lo que queremos hacer es importar nuestros propios datos a R. En este caso utilizaremos las matrices de datos presentadas en el libro de Palacio et al. (2020). Utilizaremos una base de datos de aves del capítulo 6 del libro de Palacio et al. (2020). Descargar: Aves.txt Una vez que tenemos nuestra base de datos en la carpeta de nuestro proyecto, la importamos a través de la función read.table(). Aves &lt;- read.table(&quot;Aves.txt&quot;, header = TRUE) View(Aves) sitio estacion ambiente agebad amabra rupmag spimag chlluc colmel patpic cycguj elapar furruf geoaeq ictcay lepang mimsat molbon myimac myimon pacpol phastr pitsul poldum poomel rossoc sicfla siclut spocae synspi troaed turruf viroli zenaur zoncap 2 inv bosque 1 0 0 0 0 2 2 1 0 6 1 1 1 1 0 0 0 0 0 2 0 0 1 0 0 0 0 5 3 0 2 5 2 oto bosque 1 0 1 0 0 3 2 0 0 2 0 0 2 5 0 0 0 0 0 3 0 0 1 0 0 0 0 3 4 0 1 0 2 pri bosque 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 4 0 1 6 2 ver bosque 1 0 0 0 0 3 0 0 1 6 0 0 4 0 0 0 0 1 1 6 0 0 0 0 0 0 0 1 1 0 8 2 3 inv arbustal 1 0 0 0 0 1 0 0 0 6 0 0 1 0 3 0 0 0 1 2 0 0 3 0 0 0 2 6 3 0 2 6 3 oto arbustal 0 0 0 0 0 0 0 0 0 8 0 0 2 0 0 0 0 0 1 3 0 0 3 0 0 0 0 3 6 0 1 1 3 pri arbustal 0 0 0 0 0 2 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 4 3 3 ver arbustal 3 0 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 5 4 4 inv arbustal 8 0 0 10 0 0 0 0 0 1 2 2 1 0 1 0 14 0 2 1 0 2 0 0 0 0 1 3 1 0 4 6 4 oto arbustal 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 3 3 0 0 0 0 0 4 3 0 0 1 4 pri arbustal 0 0 0 0 0 0 0 0 0 0 3 0 0 0 2 0 0 0 1 2 0 0 0 0 4 0 0 4 1 0 1 4 4 ver arbustal 1 0 0 0 0 0 0 0 0 3 1 0 0 0 0 1 0 0 1 2 0 0 0 0 0 3 2 2 0 0 0 4 5 inv bosque 0 0 0 0 0 3 2 3 0 4 1 2 1 0 1 0 0 0 0 9 0 0 0 0 0 0 0 2 0 0 2 3 5 oto bosque 37 0 2 0 0 2 2 0 0 2 0 0 1 0 0 0 0 0 0 3 2 0 0 0 0 0 0 3 2 0 0 3 5 pri bosque 0 0 0 1 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 3 1 1 4 5 ver bosque 10 0 2 0 0 2 0 2 2 0 0 0 0 0 0 1 0 3 0 5 0 0 0 0 0 0 1 1 2 2 1 5 6 inv bosque 0 0 5 0 0 1 2 1 0 4 0 0 1 0 0 0 0 0 0 8 2 0 0 0 0 0 0 0 3 0 4 6 6 oto bosque 0 1 4 0 0 0 2 0 0 3 0 0 1 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 2 0 6 pri bosque 2 0 2 0 0 0 0 1 4 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 2 2 0 3 6 ver bosque 0 4 3 0 1 1 0 0 2 1 0 0 1 0 0 4 0 4 0 1 0 0 0 0 0 0 0 0 1 1 4 3 7 inv bosque 0 0 1 0 1 0 6 0 2 0 0 1 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 16 0 4 2 7 oto bosque 0 0 0 0 0 1 2 1 0 2 0 2 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 3 0 1 0 7 pri bosque 0 0 1 0 0 0 0 0 3 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 2 2 3 7 ver bosque 1 0 0 0 0 1 7 0 3 2 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 1 0 5 2 8 inv arbustal 0 0 0 0 0 0 0 2 0 1 1 0 0 2 2 0 0 0 0 3 0 0 1 2 2 0 0 1 1 0 3 9 8 oto arbustal 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 3 8 pri arbustal 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 4 0 0 0 4 2 1 0 1 0 0 0 8 8 ver arbustal 0 0 0 0 1 0 0 0 2 2 0 0 1 0 0 0 0 0 0 2 1 0 0 0 0 7 1 4 4 0 0 5 9 inv arbustal 0 0 0 0 0 4 0 0 0 0 0 0 0 0 1 0 3 0 0 0 1 1 0 0 4 0 0 5 1 0 2 13 9 oto arbustal 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 6 0 1 2 9 pri arbustal 0 0 0 0 0 0 0 0 0 0 3 0 0 0 1 0 0 0 0 2 0 0 0 0 5 0 0 0 1 0 0 6 9 ver arbustal 3 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 1 0 0 0 0 3 11 6 1 2 0 0 0 31 10 inv arbustal 0 0 0 1 0 0 0 0 0 0 1 0 2 0 8 0 0 0 2 4 0 0 0 0 3 0 1 0 1 0 1 14 10 oto arbustal 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 3 0 0 1 0 0 0 3 0 4 0 0 7 10 pri arbustal 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 10 ver arbustal 1 0 0 0 0 1 0 0 0 7 2 0 0 0 0 0 0 0 0 2 0 0 0 0 3 8 1 2 0 0 0 12 También podemos importar archivos .csv utilizando la función read.csv(). Aves_csv &lt;- read.csv(&quot;Aves.csv&quot;, header = TRUE) Así obtendríamos la misma tabla anterior. En caso de que queramos leer archivos excel, podemos hacerlo utilizando la librería readxl. En caso de ya tener instalado el paquete no es necesario que pongan la función install.packages(\"readxl\"), al ya tenerlo instalado yo omití esta parte poniéndole el símbolo de gato #. #install.packages(&quot;readxl&quot;) library(readxl) Aves_xlsx &lt;- read_excel(&quot;Aves.xlsx&quot;) Estas tres formas de importar los datos nos producen la misma matriz. Sin embargo podemos ver que la clase del archivo importado desde excel pertenece a una subclase de los archivos de tipo data frame llamada tibble. Sin embargo, se recomienda que se cambie el tipo de archivo a solamente data.frame. Para hacer esto podemos escribir el siguiente código Aves_xlsx &lt;- data.frame(Aves_xlsx) class(Aves_xlsx) ## [1] &quot;data.frame&quot; Básicamente le estamos diciendo a R que escriba un data frame con el mismo nombre que el data frame de subtipo tibble. De esta manera sobrescribimos el primer archivo y mantenemos limpio nuestro espacio de trabajo. También se puede importar desde el botón Import Dataset que aparece en la ventana de nuestro Environment. Figura 1.11: En el panel Environment podemos hacer clic sobre la ventanaImport Dataset para importar archivos de distintos formatos. De igual manera se recomienda copiar el código al script para saber exactamente qué hacemos. 1.6 Comentarios Algo muy útil que podemos agregar a nuestro código o script son los comentarios. Estos pueden ayudarnos a recordar qué realiza alguna línea de código o alguna función o argumento en particular. La manera en la que agregamos comentarios es con el símbolo de gato #. #Esta función sirve para importar archivos. Aves &lt;- read.table(&quot;Aves.txt&quot;, header = TRUE) Podemos ver como al poner un # antes de una línea de código esta cambia a color gris. Lo que sea que realice esta línea no será leída. 1.7 Exportar datos En algunas ocasiones queremos trabajar con otro software o queremos exportar nuestra tabla modificada a Excel. Para hacer esto, utilizamos la función write.table(), por ejemplo. #Filtramos nuestro archivo para tener solo las abundancias. Abun &lt;- Aves[,4:35] #Exportamos nuestro archivo en formato .csv write.table(Abun, file = &quot;Abundancias.csv&quot;, sep = &quot;,&quot;, row.names = FALSE) De esta manera omitimos los nombres de la columnas y de las filas, además especificamos que queremos un documento en formato .csv, y que la separación sea por comas. Si no especificamos la ruta, guardaremos nuestro archivo en nuestro directorio de trabajo, si queremos guardar el archivo en un directorio específico, tendremos que dar la ruta antes de poner el nombre. write.table(Abun, file = &quot;O:/Documentos/R_Basico/Lección_1/Abundancias.csv&quot;, sep = &quot;,&quot;, row.names = FALSE) Como podemos ver, el archivo fue escrito en la dirección indicada. Figura 1.12: Dirección a en la cual hemos decidido guardar el archivo Abundancias.csv. Figura 1.13: Archivo Abundancias.csv visto en Excel. 1.8 Pedir ayuda En caso de que no sepamos que argumentos van en alguna función, podemos pedir ayuda en la consola utilizando el símbolo de interrogación ? seguido de la función sobre la cuál tengamos una duda. ?specaccum Cuando nosotros escribimos esto, se abrirá la ventana de Help en el panel inferior derecho y nos mostrará una pequeña descripción de la función, así como sus usos y qué argumentos utilizar. En ocasiones incluso podemos encontrar ejemplos. Figura 1.14: Ventana de ayuda en la pestaña Help para la función que en este caso fue ?specaccum. "],["estadística-descriptiva.html", "Lección 2 Estadística descriptiva 2.1 Medidas de tendencia central 2.2 Medidas de dispersión 2.3 Medidas de posición 2.4 El uso de la librería dplyr", " Lección 2 Estadística descriptiva En esta lección veremos las nociones básicas de estadística descriptiva haciendo uso de R y RStudio. Veremos medidas de tendencia central como la media, mediana y moda y medidas de dispersión como varianza, desviación estándar e intervalos de confianza. 2.1 Medidas de tendencia central Los estadísticos descriptivos sirven para describir parte de la información de nuestros datos. Las tres medidas de tendencia central más utilizadas son: Moda: Es el valor que más se repite en un conjunto de datos. Sin embargo, casi no se utiliza en estadística y por lo mismo no hablaremos más de ella. Media: Mide el promedio del valor de nuestros datos. Se calcula como la suma de las observaciones dividida entre el número de observaciones. Para obtener la media utilizamos la ecuación (2.1). \\[\\begin{equation} \\overline{x} = \\frac{\\sum_{i = 1}^{n}{x_i}}{n} \\tag{2.1} \\end{equation}\\] Donde \\(\\sum_{i=1}^{n}{x_i}\\) representa la sumatoria de los valores de todas nuestras observaciones y \\(n\\) es el número de observaciones. Mediana: Es el valor que se encuentra justo por la mitad de la distribución de nuestros datos. \\[ 1, 2, 3, 4, 5 \\] En este caso, la mediana es igual al número 3 que se encuentra justo por la mitad de los datos. En caso de tener un número par de observaciones, la mediana se puede calcular como un promedio de los dos valores centrales. \\[ 5, 6, 7, 8, 9, 10 \\] En este caso nuestros valores centrales son 7 y 8. Estos simplemente se promedian. \\[ \\tilde{x} = \\frac{7 + 8}{2} = 7.5 \\] 2.1.1 Media en R El cálculo de la media en R para un conjunto de datos es relativamente sencillo. Para ello implementamos la función mean(). Podemos ver un resumen de los primeros 10 datos con la función head(). library(vegan) data(&quot;iris&quot;) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa mean(iris$Sepal.Length) ## [1] 5.843333 Hemos calculado la media o el promedio para la longitud del sepalo del grupo de datos iris que viene incluida en el paquete vegan. Como en esta base de datos tenemos numerosas variables, nos referimos a una variable específica utilizando el símbolo $ seguido del nombre de la variable de interés. Si quisiéramos podemos almacenar el promedio de la longitud y el ancho de los sépalos en una variable nueva. Long.Prom &lt;- mean(iris$Sepal.Length) Long.Prom ## [1] 5.843333 Ancho.Prom &lt;- mean(iris$Sepal.Width) Ancho.Prom ## [1] 3.057333 Sepalos &lt;- data.frame(Long.Prom, Ancho.Prom) Sepalos ## Long.Prom Ancho.Prom ## 1 5.843333 3.057333 De esta manera obtenemos nuestra matriz con los promedios del largo y ancho de los sépalos. Si tuviéramos muestras de distintas poblaciones, podríamos generar una tabla con la media de cada población. Es importante que especifiquemos de qué variable queremos estimar el promedio con el símbolo $, de lo contrario podemos obtener errores. 2.1.2 Mediana en R La mediana sigue una lógica muy similar a la media. Simplemente utilizamos la función median() para obtener nuestro valor de interés. median(iris$Sepal.Length) ## [1] 5.8 De nuevo, podemos hacer una matriz de datos con las medianas de nuestras observaciones. Long.Median &lt;- median(iris$Sepal.Length) Long.Median ## [1] 5.8 Ancho.Median &lt;- median(iris$Sepal.Width) Ancho.Median ## [1] 3 Sepalos2 &lt;- data.frame(Long.Median, Ancho.Median) Sepalos2 ## Long.Median Ancho.Median ## 1 5.8 3 Incluso podríamos combinar ambas matrices (promedio y mediana) en una sola. Sepalos.Resumen &lt;- data.frame(Sepalos, Sepalos2) Sepalos.Resumen ## Long.Prom Ancho.Prom Long.Median Ancho.Median ## 1 5.843333 3.057333 5.8 3 También podríamos optar por escribir directamente las nuevas variables de la mediana sobre la matriz de datos que ya habíamos generado para las medias. Sepalos$Long.Median &lt;- median(iris$Sepal.Length) Sepalos$Ancho.Median &lt;- median(iris$Sepal.Width) Sepalos ## Long.Prom Ancho.Prom Long.Median Ancho.Median ## 1 5.843333 3.057333 5.8 3 Como podemos ver, el resultado es el mismo. Al nosotros escribir Sépalos$Long.Median y asignarle una función, estamos generando una nueva variable en la matriz de datos preexistente aunque en dicha matriz no existía previamente la variable Long.Median. Ambas son técnicas distintas de llegar al mismo resultado y ambas son perfectamente válidas. Sepalos ## Long.Prom Ancho.Prom Long.Median Ancho.Median ## 1 5.843333 3.057333 5.8 3 Sepalos.Resumen ## Long.Prom Ancho.Prom Long.Median Ancho.Median ## 1 5.843333 3.057333 5.8 3 Incluso podemos calcular la media y la mediana para los valores de los pétalos y resumir todo en una sola matriz. Pet.Long.Mean &lt;- mean(iris$Petal.Length) Pet.Ancho.Mean &lt;- mean(iris$Petal.Width) Pet.Long.Median &lt;- median(iris$Petal.Length) Pet.Ancho.Median &lt;- median(iris$Petal.Width) Resumen.iris &lt;- data.frame(Sepalos, Pet.Long.Mean, Pet.Ancho.Mean, Pet.Long.Median, Pet.Ancho.Median) Resumen.iris ## Long.Prom Ancho.Prom Long.Median Ancho.Median Pet.Long.Mean Pet.Ancho.Mean ## 1 5.843333 3.057333 5.8 3 3.758 1.199333 ## Pet.Long.Median Pet.Ancho.Median ## 1 4.35 1.3 Lo ideal sería cambiar el nombre a las primeras 4 columnas para indicar que se trata de sépalos. También podemos hacer esto. colnames(Resumen.iris)[colnames(Resumen.iris) %in% c(&quot;Long.Prom&quot;, &quot;Ancho.Prom&quot;, &quot;Long.Median&quot;, &quot;Ancho.Median&quot;)] &lt;- c(&quot;Sep.Long.Prom&quot;, &quot;Sep.Ancho.Prom&quot;, &quot;Sep.Long.Median&quot;, &quot;Sep.Ancho.Median&quot;) Resumen.iris ## Sep.Long.Prom Sep.Ancho.Prom Sep.Long.Median Sep.Ancho.Median Pet.Long.Mean ## 1 5.843333 3.057333 5.8 3 3.758 ## Pet.Ancho.Mean Pet.Long.Median Pet.Ancho.Median ## 1 1.199333 4.35 1.3 El operador %in% sirve para subsetear datos. En este caso, le indicamos que queremos que a las variables con nombre Long.Prom, Ancho.Prom, Long.Median, Ancho.Median les asigne un nuevo nombre, indicado con &lt;- y la función de concatenar c. 2.1.3 La función summary Como pudimos observar, hacer todos estos cálculos uno por uno harían que nuestro script sea demasiado largo. Debido a esto, podemos utilizar una función llamada summary() que nos da estos mismos estadísticos y otros adicionales que serán de mucha ayuda. summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## Esta función además de darnos la media y la mediana, nos da los valores mínimos y máximos, además del primer y tercer cuartil (utilizados para generar gráficos de boxplot) y nos dice cuántas observaciones tenemos de cada una de las especies. Podríamos guardar este resumen en una variable. summ.iris &lt;- summary(iris) summ.iris ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 2.1.4 Visualización básica de datos Podemos graficar, por ejemplo, la base de datos iris. plot(iris) Como podemos ver, tenemos una gráfica compleja donde no se pueden apreciar del todo bien los datos. Para hacer una gráfica de, por ejemplo, la longitud de los sépalos de cada una de las especies, tenemos que agregar ciertos argumentos a la función plot(). plot(iris, x = iris$Species, y = iris$Sepal.Length) También podemos graficar la relación entre dos variables para observar como estas van cambiando. plot(x = iris$Petal.Length, y = iris$Petal.Width) Por ejemplo, graficamos la relación que existe entre la longitud del petal y su ancho. A primera vista parece existir una correlación positiva entre ambos. Podemos agregar más argumentos a nuestro gráfico para hacerlo más presentable. plot(x = iris$Petal.Length, y = iris$Petal.Width, main = &quot;Gráfico de relación entre la longitud y el ancho del petalo&quot;, sub = &quot;Datos obtenidos de la base de datos iris&quot;, xlab = &quot;Longitud del petalo&quot;, ylab = &quot;Ancho del petalo&quot;) Los argumentos main y sub sirven para darle un título y un subtítulo a nuestro gráfico, respectivamente. Los argumentos xlab y ylab sirven para nombrar los ejes x y y. Otros argumentos con los que podemos modificar la forma, color y contorno de los puntos son pch, bg y col, respectivamente. Con el argumento cex podemos modificar el tamaño de los puntos. plot(x = iris$Petal.Length, y = iris$Petal.Width, main = &quot;Gráfico de relación entre la longitud y el ancho del petalo&quot;, sub = &quot;Datos obtenidos de la base de datos iris&quot;, xlab = &quot;Longitud del petalo&quot;, ylab = &quot;Ancho del petalo&quot;, cex = 0.8, col = iris$Species, pch = 20) Es necesario que para que el relleno (argumento bg) sea visible, se necesitan pch = 21:25, en este caso utilizamos pch = 20. Al no poner ningún valor para col el contorno de los puntos es negro. Las leyendas con los comandos R de base no son muy bonitas y son poco intuitivas. Para esto utilizaremos una librería más adelante llamada ggplot2. 2.1.5 Valores atípicos Como podemos ver en el gráfico anterior, en el eje de las ordenadas tenemos a las tres especies: Iris setosa, I. versicolor e I. virginica. Esta es una gráfica llamada boxplot y se construye a partir de los datos que tenemos en nuestro resumen. La parte inferior de la caja corresponde al primer cuartil, la línea negra central corresponde a la mediana y la parte superior de la caja corresponde al tercer cuartil. Las líneas que salen de la caja corresponden a los valores máximos y mínimos que no son valores atípicos o outliers. Un valor atípico es aquel que se sale de la cerca superior e inferior, pero, ¿cómo se definen estos límites? Para el calculo de estas cercas se implementan las siguientes ecuaciones (2.2). \\[\\begin{equation} \\begin{split} Cerca_i = Q_1 - 1.5 * IQR \\\\ Cerca_s = Q_3 + 1.5 * IQR \\end{split} \\tag{2.2} \\end{equation}\\] Donde \\(Cerca_i\\) y \\(Cerca_s\\) corresponden a la cerca inferior y superior, respectivamente, y el valor de \\(IQR\\) corresponde al rango intercuartil (diferencia entre el primer y tercer cuartil \\(IQR = Q_3 - Q_1\\)). Por ejemplo, para la especies I. virginica el \\(IQR\\) de la longitud del sepalo es el siguiente: \\[ IQR = 6.9 - 6.225 = 0.675 \\] Y las cercas correspondientes son: \\[ Cerca_i = 6.225 - 1.5*0.675 = 5.2125 \\\\ Cerca_s = 6.9 + 1.5*0.675 = 7.9125 \\] Aunque no están incluidas en el boxplot, nuestras cercas inferior y superior son 5.2125 y 7.9125, respectivamente. Cualquier valor por encima o por debajo de este límite será considerado un valor atípico o outlier. Aunque las cercas no se incluyen en el boxplot, este sí gráfica los puntos cuando estos son considerados como valores atípicos, como en el caso del punto que podemos observar en I. virginica, que tiene un valor menor a 5.2125, específicamente, tiene un valor de 4.9. Incluso nosotros podríamos buscar este valor utilizando una serie de filtros. iris %&gt;% dplyr::filter(Sepal.Length &lt;= 5.2125) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 4.6 3.4 1.4 0.3 setosa ## 7 5.0 3.4 1.5 0.2 setosa ## 8 4.4 2.9 1.4 0.2 setosa ## 9 4.9 3.1 1.5 0.1 setosa ## 10 4.8 3.4 1.6 0.2 setosa ## 11 4.8 3.0 1.4 0.1 setosa ## 12 4.3 3.0 1.1 0.1 setosa ## 13 5.1 3.5 1.4 0.3 setosa ## 14 5.1 3.8 1.5 0.3 setosa ## 15 5.1 3.7 1.5 0.4 setosa ## 16 4.6 3.6 1.0 0.2 setosa ## 17 5.1 3.3 1.7 0.5 setosa ## 18 4.8 3.4 1.9 0.2 setosa ## 19 5.0 3.0 1.6 0.2 setosa ## 20 5.0 3.4 1.6 0.4 setosa ## 21 5.2 3.5 1.5 0.2 setosa ## 22 5.2 3.4 1.4 0.2 setosa ## 23 4.7 3.2 1.6 0.2 setosa ## 24 4.8 3.1 1.6 0.2 setosa ## 25 5.2 4.1 1.5 0.1 setosa ## 26 4.9 3.1 1.5 0.2 setosa ## 27 5.0 3.2 1.2 0.2 setosa ## 28 4.9 3.6 1.4 0.1 setosa ## 29 4.4 3.0 1.3 0.2 setosa ## 30 5.1 3.4 1.5 0.2 setosa ## 31 5.0 3.5 1.3 0.3 setosa ## 32 4.5 2.3 1.3 0.3 setosa ## 33 4.4 3.2 1.3 0.2 setosa ## 34 5.0 3.5 1.6 0.6 setosa ## 35 5.1 3.8 1.9 0.4 setosa ## 36 4.8 3.0 1.4 0.3 setosa ## 37 5.1 3.8 1.6 0.2 setosa ## 38 4.6 3.2 1.4 0.2 setosa ## 39 5.0 3.3 1.4 0.2 setosa ## 40 4.9 2.4 3.3 1.0 versicolor ## 41 5.2 2.7 3.9 1.4 versicolor ## 42 5.0 2.0 3.5 1.0 versicolor ## 43 5.0 2.3 3.3 1.0 versicolor ## 44 5.1 2.5 3.0 1.1 versicolor ## 45 4.9 2.5 4.5 1.7 virginica Como podemos ver, la mayoría de las especies con valores inferiores a 5.2125 corresponden a otras especies, sin embargo, tenemos una única observación de la especies I. virginica con estas características. Los valores atípicos nos pueden indicar errores en la medición, en nuestra instrumentación, entre otras 2.2 Medidas de dispersión A diferencia de los estadísticos de tendencia central, los estadísticos de dispersión se basan en cómo se distribuyen los datos y qué tan esparcidos están. Algunas medidas de dispersión son: Rango: La diferencia entre el valor máximo y el valor mínimo de un conjunto de datos. Para obtener el valor del rango utilizamos la ecuación (2.3). \\[\\begin{equation} rango = x_{max} - x_{max} \\tag{2.3} \\end{equation}\\] Desviación estándar: Indica qué tan dispersos están los datos respecto a la media. Es la medida de dispersión más usada. Para obtener la desviación estándar utilizamos la ecuación (2.4). \\[\\begin{equation} s = \\sqrt{\\frac{\\sum_{i = 1}^{n}( {x_i-\\overline{x} ) ^2}}{n-1}} \\tag{2.4} \\end{equation}\\] Donde \\(\\sum_{i = 1}^{n}({x_i-\\overline{x})^2}\\) es igual al valor cada observación menos la media, elevado al cuadrado y el apartado \\({n-1}\\) corresponde a los grados de libertad que tenemos para el cálculo de la desviación estándar. Una medida derivad de la desviación estándar es la varianza. Se obtiene de forma sencilla como lo indica la ecuación (2.5). \\[\\begin{equation} Varianza = {s}^2 \\tag{2.5} \\end{equation}\\] 2.2.1 Rango en R El rango es simplemente la diferencia entre el valor más grande y el más chico. Su calculo en R se puede hacer con la función range(). range(iris$Petal.Length) ## [1] 1.0 6.9 A partir del output de está función podemos hacer el cálculo del rango. \\[ Rango = 6.9 - 1 = 5.9 \\] Otra forma de hacer el cálculo de manera directa es con las funciones min() y max(). Rango &lt;- max(iris$Petal.Length) - min(iris$Petal.Length) Rango ## [1] 5.9 2.2.2 Desviación estándar en R Para obtener la desviación estándar en R lo único que necesitamos es utilizar la función sd(). SD &lt;- sd(iris$Petal.Length) SD ## [1] 1.765298 En caso de querer obtener la varianza, simplemente elevamos nuestro valor al cuadrado. Var &lt;- SD^2 Var ## [1] 3.116278 2.3 Medidas de posición Podemos hacer también el calculo de medidas de posición como las siguientes: Frecuencia absoluta: Es el valor total de los datos que observamos. Frecuencia relativa: Es el valor relativo de cada dato respecto del total como se observa en la ecuación (2.6). Si se le multiplica por 100% se obtiene su valor en porcentaje. \\[\\begin{equation} f_i = \\frac{n_i}{N} \\tag{2.6} \\end{equation}\\] En este caso, utilizaremos la base de datos de aves que vimos en la lección anterior. Aves &lt;- read.table(&quot;Aves.txt&quot;, header = TRUE) Para obtener la frecuencia absoluta utilizamos al función table() y el argumento Aves$ambiente para obtener la frecuencia de aves del bosque y aves de arbustales. table(Aves$ambiente) ## ## arbustal bosque ## 20 16 En caso de querer las frecuencias relativas, podemos usar la función prop.table() y el mismo argumento de Aves$ambiente. Para esto debemos tener las frecuencias absolutas guardadas en una variable. Frecab &lt;- table(Aves$ambiente) prop.table(Frecab) ## ## arbustal bosque ## 0.5555556 0.4444444 Para facilitar la lectura vamos a transformar las frecuencias relativas a porcentajes multiplicando por 100 y utilizando la función round() para redondear los valores a 2 dígitos. round((prop.table(Frecab) * 100), 2) ## ## arbustal bosque ## 55.56 44.44 Podemos ver que el 55.56% de las aves son de hábitos arbustivos mientras que el 44.44% prefieren los bosques. 2.4 El uso de la librería dplyr Para facilitar aún más las cosas podemos utilizar las herramientas de la librería dplyr que vienen incluidas en el paquete de tidyverse. library(tidyverse) Las funciones más importantes de este paquete son: group_by: agrupa datos. summarize o summarise: resumen de datos agrupados. filter: encuentra filas con ciertas condiciones. select: junto a starts_with, ends_with o contains mutate: genera nuevas variables. %&gt;%: pipeline. arrange: ordena. Con dplyr la extracción de la media y la mediana es a través de la función summarise y sería así: data(&quot;iris&quot;) resum.iris &lt;- summarise(iris, Petal.Length.Mean = mean(Petal.Length), Petal.Length.Median = median(Petal.Length)) resum.iris ## Petal.Length.Mean Petal.Length.Median ## 1 3.758 4.35 Pero supongamos que quiero extraer estos valores de cada una de las especies. Para esto utilizamos la función group_by: iris.especies &lt;- group_by(iris, Species) #Aparentemente esta función no cambia la matriz de datos, sin embargo si hacemos un summarise estos se ordenarán por la forma en que los agrupamos. resum.iris.especies &lt;- summarise(iris.especies, Petal.Length.Mean = mean(Petal.Length), Petal.Length.Median = median(Petal.Length)) resum.iris.especies ## # A tibble: 3 x 3 ## Species Petal.Length.Mean Petal.Length.Median ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 1.46 1.5 ## 2 versicolor 4.26 4.35 ## 3 virginica 5.55 5.55 Con la función mutate nosotros podemos crear nuevas variables. Por ejemplo, la relación entre longitud del pétalo-ancho del pétalo. iris &lt;- mutate(iris, Petal.Leng.Wid.Ratio = Petal.Length/Petal.Width) iris$Petal.Leng.Wid.Ratio ## [1] 7.000000 7.000000 6.500000 7.500000 7.000000 4.250000 4.666667 ## [8] 7.500000 7.000000 15.000000 7.500000 8.000000 14.000000 11.000000 ## [15] 6.000000 3.750000 3.250000 4.666667 5.666667 5.000000 8.500000 ## [22] 3.750000 5.000000 3.400000 9.500000 8.000000 4.000000 7.500000 ## [29] 7.000000 8.000000 8.000000 3.750000 15.000000 7.000000 7.500000 ## [36] 6.000000 6.500000 14.000000 6.500000 7.500000 4.333333 4.333333 ## [43] 6.500000 2.666667 4.750000 4.666667 8.000000 7.000000 7.500000 ## [50] 7.000000 3.357143 3.000000 3.266667 3.076923 3.066667 3.461538 ## [57] 2.937500 3.300000 3.538462 2.785714 3.500000 2.800000 4.000000 ## [64] 3.357143 2.769231 3.142857 3.000000 4.100000 3.000000 3.545455 ## [71] 2.666667 3.076923 3.266667 3.916667 3.307692 3.142857 3.428571 ## [78] 2.941176 3.000000 3.500000 3.454545 3.700000 3.250000 3.187500 ## [85] 3.000000 2.812500 3.133333 3.384615 3.153846 3.076923 3.666667 ## [92] 3.285714 3.333333 3.300000 3.230769 3.500000 3.230769 3.307692 ## [99] 2.727273 3.153846 2.400000 2.684211 2.809524 3.111111 2.636364 ## [106] 3.142857 2.647059 3.500000 3.222222 2.440000 2.550000 2.789474 ## [113] 2.619048 2.500000 2.125000 2.304348 3.055556 3.045455 3.000000 ## [120] 3.333333 2.478261 2.450000 3.350000 2.722222 2.714286 3.333333 ## [127] 2.666667 2.722222 2.666667 3.625000 3.210526 3.200000 2.545455 ## [134] 3.400000 4.000000 2.652174 2.333333 3.055556 2.666667 2.571429 ## [141] 2.333333 2.217391 2.684211 2.565217 2.280000 2.260870 2.631579 ## [148] 2.600000 2.347826 2.833333 Para realizar operaciones de manera secuencial utilizamos el pipeline %&gt;%. En lugar de escribir el siguiente código y asignar dos variables, podemos hacer todo de una. #iris.especies &lt;- group_by(iris, Species) #resum.iris.especies &lt;- summarise(iris.especies, Petal.Length.Mean = mean(Petal.Length), Petal.Length.Median = median(Petal.Length)) resum.iris.especies2 &lt;- iris %&gt;% group_by(Species) %&gt;% summarise(Petal.Length.Mean = mean(Petal.Length), Petal.Length.Median = median(Petal.Length)) resum.iris.especies2 ## # A tibble: 3 x 3 ## Species Petal.Length.Mean Petal.Length.Median ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 1.46 1.5 ## 2 versicolor 4.26 4.35 ## 3 virginica 5.55 5.55 Trabajar de esta forma es más cómodo y más claro. Para hacer filtros utilizamos la función filter. Sin embargo, como posiblemente hay otros paquetes que han nombrado una función igual, para evitar conflictos agregamos dplyr:: antes de la función filter para especificar que queremos trabajar con el filter del paquete de dplyr. Hagamos un ejemplo de filtrado de la matriz de datos iris para obtener solamente las especies de I. versicolor. iris.versicolor &lt;- iris %&gt;% dplyr::filter(Species == &quot;versicolor&quot;) iris.versicolor ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 7.0 3.2 4.7 1.4 versicolor ## 2 6.4 3.2 4.5 1.5 versicolor ## 3 6.9 3.1 4.9 1.5 versicolor ## 4 5.5 2.3 4.0 1.3 versicolor ## 5 6.5 2.8 4.6 1.5 versicolor ## 6 5.7 2.8 4.5 1.3 versicolor ## 7 6.3 3.3 4.7 1.6 versicolor ## 8 4.9 2.4 3.3 1.0 versicolor ## 9 6.6 2.9 4.6 1.3 versicolor ## 10 5.2 2.7 3.9 1.4 versicolor ## 11 5.0 2.0 3.5 1.0 versicolor ## 12 5.9 3.0 4.2 1.5 versicolor ## 13 6.0 2.2 4.0 1.0 versicolor ## 14 6.1 2.9 4.7 1.4 versicolor ## 15 5.6 2.9 3.6 1.3 versicolor ## 16 6.7 3.1 4.4 1.4 versicolor ## 17 5.6 3.0 4.5 1.5 versicolor ## 18 5.8 2.7 4.1 1.0 versicolor ## 19 6.2 2.2 4.5 1.5 versicolor ## 20 5.6 2.5 3.9 1.1 versicolor ## 21 5.9 3.2 4.8 1.8 versicolor ## 22 6.1 2.8 4.0 1.3 versicolor ## 23 6.3 2.5 4.9 1.5 versicolor ## 24 6.1 2.8 4.7 1.2 versicolor ## 25 6.4 2.9 4.3 1.3 versicolor ## 26 6.6 3.0 4.4 1.4 versicolor ## 27 6.8 2.8 4.8 1.4 versicolor ## 28 6.7 3.0 5.0 1.7 versicolor ## 29 6.0 2.9 4.5 1.5 versicolor ## 30 5.7 2.6 3.5 1.0 versicolor ## 31 5.5 2.4 3.8 1.1 versicolor ## 32 5.5 2.4 3.7 1.0 versicolor ## 33 5.8 2.7 3.9 1.2 versicolor ## 34 6.0 2.7 5.1 1.6 versicolor ## 35 5.4 3.0 4.5 1.5 versicolor ## 36 6.0 3.4 4.5 1.6 versicolor ## 37 6.7 3.1 4.7 1.5 versicolor ## 38 6.3 2.3 4.4 1.3 versicolor ## 39 5.6 3.0 4.1 1.3 versicolor ## 40 5.5 2.5 4.0 1.3 versicolor ## 41 5.5 2.6 4.4 1.2 versicolor ## 42 6.1 3.0 4.6 1.4 versicolor ## 43 5.8 2.6 4.0 1.2 versicolor ## 44 5.0 2.3 3.3 1.0 versicolor ## 45 5.6 2.7 4.2 1.3 versicolor ## 46 5.7 3.0 4.2 1.2 versicolor ## 47 5.7 2.9 4.2 1.3 versicolor ## 48 6.2 2.9 4.3 1.3 versicolor ## 49 5.1 2.5 3.0 1.1 versicolor ## 50 5.7 2.8 4.1 1.3 versicolor ## Petal.Leng.Wid.Ratio ## 1 3.357143 ## 2 3.000000 ## 3 3.266667 ## 4 3.076923 ## 5 3.066667 ## 6 3.461538 ## 7 2.937500 ## 8 3.300000 ## 9 3.538462 ## 10 2.785714 ## 11 3.500000 ## 12 2.800000 ## 13 4.000000 ## 14 3.357143 ## 15 2.769231 ## 16 3.142857 ## 17 3.000000 ## 18 4.100000 ## 19 3.000000 ## 20 3.545455 ## 21 2.666667 ## 22 3.076923 ## 23 3.266667 ## 24 3.916667 ## 25 3.307692 ## 26 3.142857 ## 27 3.428571 ## 28 2.941176 ## 29 3.000000 ## 30 3.500000 ## 31 3.454545 ## 32 3.700000 ## 33 3.250000 ## 34 3.187500 ## 35 3.000000 ## 36 2.812500 ## 37 3.133333 ## 38 3.384615 ## 39 3.153846 ## 40 3.076923 ## 41 3.666667 ## 42 3.285714 ## 43 3.333333 ## 44 3.300000 ## 45 3.230769 ## 46 3.500000 ## 47 3.230769 ## 48 3.307692 ## 49 2.727273 ## 50 3.153846 Como podemos ver, hemos filtrado a todas las especies pertenecientes a I. versicolor. Tabla 2.1: Símbolos utilizados con la función filter Símbolo Significado &gt; Mayor que &lt; Menor que == Igual a &gt;= Mayor o igual a &lt;= Menor o igual a != Distinto a %in% Dentro del grupo is.na Es NA !is.na No es NA |, &amp; O, Y Habíamos visto un individuo de la especie de I. virginica que tenía un valor en la longitud del sépalo menor a la cerca inferior de 5.2125 por lo que se le consideraba un valor atípico. Podemos encontrar este valor utilizando la función dplyr::filter(). outlier &lt;- iris %&gt;% dplyr::filter(Species == &quot;virginica&quot;, Sepal.Length &lt;= 5.2125) outlier ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 4.9 2.5 4.5 1.7 virginica ## Petal.Leng.Wid.Ratio ## 1 2.647059 Así podemos corroborar las otras medidas que este valor presenta, para verificar que no sean atípica en sus correspondientes cuartiles. Podemos utilizar otra función llamada n() junto con summarise() para obtener las frecuencias absolutas de nuestros datos. Frecuencias &lt;- iris %&gt;% group_by(Species) %&gt;% summarise(Frecuencia_absoluta = n()) Frecuencias ## # A tibble: 3 x 2 ## Species Frecuencia_absoluta ## &lt;fct&gt; &lt;int&gt; ## 1 setosa 50 ## 2 versicolor 50 ## 3 virginica 50 Para obtener la frecuencia relativa utilizamos la función mutate para agregar una nueva variable llamada Frecuencia_relativa junto con la función sum para obtener el número total de observaciones \\(N\\) de la ecuación (2.6) para nuestros datos. Frecuencias &lt;- Frecuencias %&gt;% mutate(Frecuencia_relativa = Frecuencia_absoluta / sum(Frecuencia_absoluta)) Frecuencias ## # A tibble: 3 x 3 ## Species Frecuencia_absoluta Frecuencia_relativa ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 setosa 50 0.333 ## 2 versicolor 50 0.333 ## 3 virginica 50 0.333 Y si quisiéramos obtener el porcentaje, de nuevo podemos utilizar la función mutate y multiplicando la variable Frecuencia_relativa por 100%. Frecuencias &lt;- Frecuencias %&gt;% mutate(Porcentaje = Frecuencia_relativa*100) Frecuencias ## # A tibble: 3 x 4 ## Species Frecuencia_absoluta Frecuencia_relativa Porcentaje ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 50 0.333 33.3 ## 2 versicolor 50 0.333 33.3 ## 3 virginica 50 0.333 33.3 Con la función select podemos elegir unas cuantas variables para trabajar. Esto es útil para bases de datos con muchas variables como matrices de abundancias. Petals &lt;- iris %&gt;% dplyr::select(Petal.Length, Petal.Width, Species) Petals ## Petal.Length Petal.Width Species ## 1 1.4 0.2 setosa ## 2 1.4 0.2 setosa ## 3 1.3 0.2 setosa ## 4 1.5 0.2 setosa ## 5 1.4 0.2 setosa ## 6 1.7 0.4 setosa ## 7 1.4 0.3 setosa ## 8 1.5 0.2 setosa ## 9 1.4 0.2 setosa ## 10 1.5 0.1 setosa ## 11 1.5 0.2 setosa ## 12 1.6 0.2 setosa ## 13 1.4 0.1 setosa ## 14 1.1 0.1 setosa ## 15 1.2 0.2 setosa ## 16 1.5 0.4 setosa ## 17 1.3 0.4 setosa ## 18 1.4 0.3 setosa ## 19 1.7 0.3 setosa ## 20 1.5 0.3 setosa ## 21 1.7 0.2 setosa ## 22 1.5 0.4 setosa ## 23 1.0 0.2 setosa ## 24 1.7 0.5 setosa ## 25 1.9 0.2 setosa ## 26 1.6 0.2 setosa ## 27 1.6 0.4 setosa ## 28 1.5 0.2 setosa ## 29 1.4 0.2 setosa ## 30 1.6 0.2 setosa ## 31 1.6 0.2 setosa ## 32 1.5 0.4 setosa ## 33 1.5 0.1 setosa ## 34 1.4 0.2 setosa ## 35 1.5 0.2 setosa ## 36 1.2 0.2 setosa ## 37 1.3 0.2 setosa ## 38 1.4 0.1 setosa ## 39 1.3 0.2 setosa ## 40 1.5 0.2 setosa ## 41 1.3 0.3 setosa ## 42 1.3 0.3 setosa ## 43 1.3 0.2 setosa ## 44 1.6 0.6 setosa ## 45 1.9 0.4 setosa ## 46 1.4 0.3 setosa ## 47 1.6 0.2 setosa ## 48 1.4 0.2 setosa ## 49 1.5 0.2 setosa ## 50 1.4 0.2 setosa ## 51 4.7 1.4 versicolor ## 52 4.5 1.5 versicolor ## 53 4.9 1.5 versicolor ## 54 4.0 1.3 versicolor ## 55 4.6 1.5 versicolor ## 56 4.5 1.3 versicolor ## 57 4.7 1.6 versicolor ## 58 3.3 1.0 versicolor ## 59 4.6 1.3 versicolor ## 60 3.9 1.4 versicolor ## 61 3.5 1.0 versicolor ## 62 4.2 1.5 versicolor ## 63 4.0 1.0 versicolor ## 64 4.7 1.4 versicolor ## 65 3.6 1.3 versicolor ## 66 4.4 1.4 versicolor ## 67 4.5 1.5 versicolor ## 68 4.1 1.0 versicolor ## 69 4.5 1.5 versicolor ## 70 3.9 1.1 versicolor ## 71 4.8 1.8 versicolor ## 72 4.0 1.3 versicolor ## 73 4.9 1.5 versicolor ## 74 4.7 1.2 versicolor ## 75 4.3 1.3 versicolor ## 76 4.4 1.4 versicolor ## 77 4.8 1.4 versicolor ## 78 5.0 1.7 versicolor ## 79 4.5 1.5 versicolor ## 80 3.5 1.0 versicolor ## 81 3.8 1.1 versicolor ## 82 3.7 1.0 versicolor ## 83 3.9 1.2 versicolor ## 84 5.1 1.6 versicolor ## 85 4.5 1.5 versicolor ## 86 4.5 1.6 versicolor ## 87 4.7 1.5 versicolor ## 88 4.4 1.3 versicolor ## 89 4.1 1.3 versicolor ## 90 4.0 1.3 versicolor ## 91 4.4 1.2 versicolor ## 92 4.6 1.4 versicolor ## 93 4.0 1.2 versicolor ## 94 3.3 1.0 versicolor ## 95 4.2 1.3 versicolor ## 96 4.2 1.2 versicolor ## 97 4.2 1.3 versicolor ## 98 4.3 1.3 versicolor ## 99 3.0 1.1 versicolor ## 100 4.1 1.3 versicolor ## 101 6.0 2.5 virginica ## 102 5.1 1.9 virginica ## 103 5.9 2.1 virginica ## 104 5.6 1.8 virginica ## 105 5.8 2.2 virginica ## 106 6.6 2.1 virginica ## 107 4.5 1.7 virginica ## 108 6.3 1.8 virginica ## 109 5.8 1.8 virginica ## 110 6.1 2.5 virginica ## 111 5.1 2.0 virginica ## 112 5.3 1.9 virginica ## 113 5.5 2.1 virginica ## 114 5.0 2.0 virginica ## 115 5.1 2.4 virginica ## 116 5.3 2.3 virginica ## 117 5.5 1.8 virginica ## 118 6.7 2.2 virginica ## 119 6.9 2.3 virginica ## 120 5.0 1.5 virginica ## 121 5.7 2.3 virginica ## 122 4.9 2.0 virginica ## 123 6.7 2.0 virginica ## 124 4.9 1.8 virginica ## 125 5.7 2.1 virginica ## 126 6.0 1.8 virginica ## 127 4.8 1.8 virginica ## 128 4.9 1.8 virginica ## 129 5.6 2.1 virginica ## 130 5.8 1.6 virginica ## 131 6.1 1.9 virginica ## 132 6.4 2.0 virginica ## 133 5.6 2.2 virginica ## 134 5.1 1.5 virginica ## 135 5.6 1.4 virginica ## 136 6.1 2.3 virginica ## 137 5.6 2.4 virginica ## 138 5.5 1.8 virginica ## 139 4.8 1.8 virginica ## 140 5.4 2.1 virginica ## 141 5.6 2.4 virginica ## 142 5.1 2.3 virginica ## 143 5.1 1.9 virginica ## 144 5.9 2.3 virginica ## 145 5.7 2.5 virginica ## 146 5.2 2.3 virginica ## 147 5.0 1.9 virginica ## 148 5.2 2.0 virginica ## 149 5.4 2.3 virginica ## 150 5.1 1.8 virginica En este caso, eliminamos los datos de los sépalos y nos quedamos con los datos solamente de los pétalos. Otra forma de seleccionar las variables es con el argumento starts_with(), por ejemplo, para seleccionar solamente las variables que empiecen con la palabra Petal. Petals2 &lt;- iris %&gt;% dplyr::select(starts_with(&quot;Petal&quot;), Species) Petals2 ## Petal.Length Petal.Width Petal.Leng.Wid.Ratio Species ## 1 1.4 0.2 7.000000 setosa ## 2 1.4 0.2 7.000000 setosa ## 3 1.3 0.2 6.500000 setosa ## 4 1.5 0.2 7.500000 setosa ## 5 1.4 0.2 7.000000 setosa ## 6 1.7 0.4 4.250000 setosa ## 7 1.4 0.3 4.666667 setosa ## 8 1.5 0.2 7.500000 setosa ## 9 1.4 0.2 7.000000 setosa ## 10 1.5 0.1 15.000000 setosa ## 11 1.5 0.2 7.500000 setosa ## 12 1.6 0.2 8.000000 setosa ## 13 1.4 0.1 14.000000 setosa ## 14 1.1 0.1 11.000000 setosa ## 15 1.2 0.2 6.000000 setosa ## 16 1.5 0.4 3.750000 setosa ## 17 1.3 0.4 3.250000 setosa ## 18 1.4 0.3 4.666667 setosa ## 19 1.7 0.3 5.666667 setosa ## 20 1.5 0.3 5.000000 setosa ## 21 1.7 0.2 8.500000 setosa ## 22 1.5 0.4 3.750000 setosa ## 23 1.0 0.2 5.000000 setosa ## 24 1.7 0.5 3.400000 setosa ## 25 1.9 0.2 9.500000 setosa ## 26 1.6 0.2 8.000000 setosa ## 27 1.6 0.4 4.000000 setosa ## 28 1.5 0.2 7.500000 setosa ## 29 1.4 0.2 7.000000 setosa ## 30 1.6 0.2 8.000000 setosa ## 31 1.6 0.2 8.000000 setosa ## 32 1.5 0.4 3.750000 setosa ## 33 1.5 0.1 15.000000 setosa ## 34 1.4 0.2 7.000000 setosa ## 35 1.5 0.2 7.500000 setosa ## 36 1.2 0.2 6.000000 setosa ## 37 1.3 0.2 6.500000 setosa ## 38 1.4 0.1 14.000000 setosa ## 39 1.3 0.2 6.500000 setosa ## 40 1.5 0.2 7.500000 setosa ## 41 1.3 0.3 4.333333 setosa ## 42 1.3 0.3 4.333333 setosa ## 43 1.3 0.2 6.500000 setosa ## 44 1.6 0.6 2.666667 setosa ## 45 1.9 0.4 4.750000 setosa ## 46 1.4 0.3 4.666667 setosa ## 47 1.6 0.2 8.000000 setosa ## 48 1.4 0.2 7.000000 setosa ## 49 1.5 0.2 7.500000 setosa ## 50 1.4 0.2 7.000000 setosa ## 51 4.7 1.4 3.357143 versicolor ## 52 4.5 1.5 3.000000 versicolor ## 53 4.9 1.5 3.266667 versicolor ## 54 4.0 1.3 3.076923 versicolor ## 55 4.6 1.5 3.066667 versicolor ## 56 4.5 1.3 3.461538 versicolor ## 57 4.7 1.6 2.937500 versicolor ## 58 3.3 1.0 3.300000 versicolor ## 59 4.6 1.3 3.538462 versicolor ## 60 3.9 1.4 2.785714 versicolor ## 61 3.5 1.0 3.500000 versicolor ## 62 4.2 1.5 2.800000 versicolor ## 63 4.0 1.0 4.000000 versicolor ## 64 4.7 1.4 3.357143 versicolor ## 65 3.6 1.3 2.769231 versicolor ## 66 4.4 1.4 3.142857 versicolor ## 67 4.5 1.5 3.000000 versicolor ## 68 4.1 1.0 4.100000 versicolor ## 69 4.5 1.5 3.000000 versicolor ## 70 3.9 1.1 3.545455 versicolor ## 71 4.8 1.8 2.666667 versicolor ## 72 4.0 1.3 3.076923 versicolor ## 73 4.9 1.5 3.266667 versicolor ## 74 4.7 1.2 3.916667 versicolor ## 75 4.3 1.3 3.307692 versicolor ## 76 4.4 1.4 3.142857 versicolor ## 77 4.8 1.4 3.428571 versicolor ## 78 5.0 1.7 2.941176 versicolor ## 79 4.5 1.5 3.000000 versicolor ## 80 3.5 1.0 3.500000 versicolor ## 81 3.8 1.1 3.454545 versicolor ## 82 3.7 1.0 3.700000 versicolor ## 83 3.9 1.2 3.250000 versicolor ## 84 5.1 1.6 3.187500 versicolor ## 85 4.5 1.5 3.000000 versicolor ## 86 4.5 1.6 2.812500 versicolor ## 87 4.7 1.5 3.133333 versicolor ## 88 4.4 1.3 3.384615 versicolor ## 89 4.1 1.3 3.153846 versicolor ## 90 4.0 1.3 3.076923 versicolor ## 91 4.4 1.2 3.666667 versicolor ## 92 4.6 1.4 3.285714 versicolor ## 93 4.0 1.2 3.333333 versicolor ## 94 3.3 1.0 3.300000 versicolor ## 95 4.2 1.3 3.230769 versicolor ## 96 4.2 1.2 3.500000 versicolor ## 97 4.2 1.3 3.230769 versicolor ## 98 4.3 1.3 3.307692 versicolor ## 99 3.0 1.1 2.727273 versicolor ## 100 4.1 1.3 3.153846 versicolor ## 101 6.0 2.5 2.400000 virginica ## 102 5.1 1.9 2.684211 virginica ## 103 5.9 2.1 2.809524 virginica ## 104 5.6 1.8 3.111111 virginica ## 105 5.8 2.2 2.636364 virginica ## 106 6.6 2.1 3.142857 virginica ## 107 4.5 1.7 2.647059 virginica ## 108 6.3 1.8 3.500000 virginica ## 109 5.8 1.8 3.222222 virginica ## 110 6.1 2.5 2.440000 virginica ## 111 5.1 2.0 2.550000 virginica ## 112 5.3 1.9 2.789474 virginica ## 113 5.5 2.1 2.619048 virginica ## 114 5.0 2.0 2.500000 virginica ## 115 5.1 2.4 2.125000 virginica ## 116 5.3 2.3 2.304348 virginica ## 117 5.5 1.8 3.055556 virginica ## 118 6.7 2.2 3.045455 virginica ## 119 6.9 2.3 3.000000 virginica ## 120 5.0 1.5 3.333333 virginica ## 121 5.7 2.3 2.478261 virginica ## 122 4.9 2.0 2.450000 virginica ## 123 6.7 2.0 3.350000 virginica ## 124 4.9 1.8 2.722222 virginica ## 125 5.7 2.1 2.714286 virginica ## 126 6.0 1.8 3.333333 virginica ## 127 4.8 1.8 2.666667 virginica ## 128 4.9 1.8 2.722222 virginica ## 129 5.6 2.1 2.666667 virginica ## 130 5.8 1.6 3.625000 virginica ## 131 6.1 1.9 3.210526 virginica ## 132 6.4 2.0 3.200000 virginica ## 133 5.6 2.2 2.545455 virginica ## 134 5.1 1.5 3.400000 virginica ## 135 5.6 1.4 4.000000 virginica ## 136 6.1 2.3 2.652174 virginica ## 137 5.6 2.4 2.333333 virginica ## 138 5.5 1.8 3.055556 virginica ## 139 4.8 1.8 2.666667 virginica ## 140 5.4 2.1 2.571429 virginica ## 141 5.6 2.4 2.333333 virginica ## 142 5.1 2.3 2.217391 virginica ## 143 5.1 1.9 2.684211 virginica ## 144 5.9 2.3 2.565217 virginica ## 145 5.7 2.5 2.280000 virginica ## 146 5.2 2.3 2.260870 virginica ## 147 5.0 1.9 2.631579 virginica ## 148 5.2 2.0 2.600000 virginica ## 149 5.4 2.3 2.347826 virginica ## 150 5.1 1.8 2.833333 virginica "],["histogramas-y-gráficos-de-densidad.html", "Lección 3 Histogramas y gráficos de densidad 3.1 R y ggplot2", " Lección 3 Histogramas y gráficos de densidad Un histograma es una representación de la distribución de datos de una variable numérica. Un histograma nos puede mostrar la forma de la distribución de los datos de nuestra variable. Las áreas dentro de un histograma corresponden a las frecuencias de dichas clases. De igual manera, la forma de un histograma puede ser muy útil al momento de interpretar datos. Se dice que un histograma es unimodal cuando solamente se aprecia un pico máximo en los datos y bimodal cuando se observan dos. Además un histograma puede estar sesgado cuando los datos se cargan hacia uno de los extremos. Se dice que un histograma está sesgado hacia la izquierda cuando la el modo (pico) esta cargado a la derecha, dejando una cola larga hacia la izquierda y que está sesgado hacia la derecha cuando ocurre lo contrario. Podemos ver en la figura 3.1 los distintos tipos de distribuciones que se pueden formar si trazamos una línea sobre los histogramas, tomado de Samuels et al. (2016). Figura 3.1: Formas de distribución. Una curva de densidad es una forma de representar la distribución de frecuencias de variables continuas, generalmente con una línea curva. El eje de las abscisas generalmente está representado por una escala llamada escala de densidad. Cuando esto es así, las frecuencias relativas están representadas como el área debajo de la curva. El área total debajo de la curva debe ser igual a 1. 3.1 R y ggplot2 En esta sección aprenderemos a utilizar las herramientas incluidas en R para la elaboración de histogramas y gráficos de densidad. Sin embargo, también utilizaremos una librería que nos permitirá visualizar mejor los datos llamada gplot2. 3.1.1 Histogramas y gráficos de densidad en R En esta ocasión utilizaremos la base de datos mtcars que viene incluida en el paquete ggplot2. library(ggplot2) data(mtcars) Para crear un histograma con las herramientas básicas de R simplemente escribimos el siguiente código. El argumento prob = TRUE hace que la abscisa (y) este representado por una escala de densidad en lugar de los valores de las variables. hist(mtcars$mpg, prob = TRUE) Figura 3.2: Histograma de la matriz de datos mtcars. El eje de la x representa las millas por galón y el eje y repesenta la escala de densidad. En caso de que queramos hacer un gráfico de densidad en lugar de un histograma podemos utilizar el siguiente código. La función density() nos muestra la información acerca de la distribución de los datos. Para ver el gráfico debemos utilizar la función plot(). plot(density(mtcars$mpg)) Figura 3.3: Gráfico de densidad de la matriz de datos mtcars. El eje de la x representa las millas por galón y el eje y repesenta la escala de densidad. Podemos visualizar tanto el histograma como la línea de densidad en el mismo gráfico. Para esto graficamos el histograma de manera normal con la función hist() pero después de esto utilizamos la función lines(). hist(mtcars$mpg, prob = TRUE) lines(density(mtcars$mpg), col = &quot;blue&quot;) Figura 3.4: Histograma y gráfico de densidad de la matriz de datos mtcars. 3.1.2 Histogramas y gráficos de densidad en ggplot2 Como ya hemos cargado ggplot2 en el ejemplo anterior para poder importar la base de datos, no es necesario volver a cargarlo. Empecemos entonces con el gráfico más básico de nuestros datos utilizando las funciones ggplot() y geom_density(). ggplot(mtcars, aes(x = mpg)) + geom_density() Figura 3.5: Gráfico de densidad utilizando ggplot2. Podemos agregar etiquetas a los valores de x y y. ggplot(mtcars, aes(x = mpg)) + geom_density() + labs(x = &quot;Milas por galón&quot;, y = &quot;Densidad&quot;) Figura 3.6: Gráfico de densidad utilizando ggplot2 con las etiquetas modificadas. Además podemos rellenar el área debajo de la curva con el argumento fill. ggplot(mtcars, aes(x = mpg)) + geom_density(fill = &quot;lightblue&quot;) + labs(x = &quot;Milas por galón&quot;, y = &quot;Densidad&quot;) Figura 3.7: Gráfico de densidad utilizando ggplot2 con el área bajo la curva rellena. Adicionalmente podemos modificar la transparencia con el argumento alpha. ggplot(mtcars, aes(x = mpg)) + geom_density(fill = &quot;lightblue&quot;, alpha = 0.5) + labs(x = &quot;Milas por galón&quot;, y = &quot;Densidad&quot;) Figura 3.8: Gráfico de densidad utilizando ggplot2 relleno y con transparencia modificada. De igual manera, podemos indicar la posición de la media en este gráfico. Primero debemos de caluclar la media con la función mean(). mpg.mean &lt;- mean(mtcars$mpg) Una vez calculada la media, podemos utilizar otra función llamada geom_vline en el gráfico que ya habíamos creado. ggplot(mtcars, aes(x = mpg)) + geom_density(fill = &quot;lightblue&quot;, alpha = 0.5) + labs(x = &quot;Milas por galón&quot;, y = &quot;Densidad&quot;) + geom_vline(xintercept = mpg.mean, size = 1, color = &quot;red&quot;, linetype = &quot;solid&quot;) Figura 3.9: Gráfico de densidad utilizando ggplot2 en donde se indica la media. Adicionalmente podemos explorar distintos temas que ggplot2 ofrece. ggplot(mtcars, aes(x = mpg)) + geom_density(fill = &quot;lightblue&quot;, alpha = 0.5) + labs(x = &quot;Milas por galón&quot;, y = &quot;Densidad&quot;) + geom_vline(xintercept = mpg.mean, size = 1, color = &quot;red&quot;, linetype = &quot;solid&quot;) + theme_classic() Figura 3.10: Gráfico de densidad utilizando ggplot2 modificando los temas.. "],["references.html", "References", " References Palacio, F. X., Apodaca, M. J., &amp; Crisci, J. V. (2020). Análisis multivariado para datos biológicos. Teoría y su aplicación utilizando el lenguaje r. Fundación Azara. Samuels, M. L., Witmer, J. A., &amp; Schaffner, A. A. (2016). Statistics for the life sciences (5th Edition). Pearson. "]]
