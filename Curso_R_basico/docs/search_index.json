[["introducción-a-r-y-rstudio.html", "Lección 1 Introducción a R y RStudio 1.1 Interfaz 1.2 Creando nuestro primer proyecto 1.3 Objetos y variables 1.4 Instalar paquetes 1.5 Importar datos a R 1.6 Comentarios 1.7 Exportar datos 1.8 Pedir ayuda", " Lección 1 Introducción a R y RStudio 1.1 Interfaz R Studio cuenta con 4 ventanas esenciales: La consola, que es donde se ejecutan los comandos y se visualizan los outputs de nuestros análisis. Los scripts, que corresponde a la ventana superior izquierda. No solamente se visualizan scripts, también se pueden trabajar otros archivos como documentos de Markdown o Apps tipo Shiny. El Envirnoment y el History que corresponden a la ventana superior derecha. También cuenta con otras herramientas útiles como Build y Git que se utilizan otro tipo de cuestiones como la elaboración de documentos y páginas web. Los Files, Packages, Plots y Help se encuentran en la esquina inferior derecha. En ellas podemos ver las gráficas que hemos hecho, revisar los paquetes que tenemos instalados y consultar el directorio de trabajo actual. Figura 1.1: Interfaz de RStudio En Tools -&gt; Global Options -&gt; Appearance podemos configurar los colores de nuestra interfaz, el tamaño de la fuente, el zoom, el tema del editor y la tipografía. Figura 1.2: Para abrir las opciones globales nos vamos a Tools -&gt; Global Options. Figura 1.3: Ventana de Appearance dentro de las Opciones Globales de RStudio Es muy importante que nos sintamos cómodos al momento de trabajar en RStudio, sobre todo cuando trabajamos sesiones largas. Personalmente, recomiendo colores oscuros que no cansen tanto la vista. 1.2 Creando nuestro primer proyecto Una vez que nos familiarizamos con la interfaz, es momento de crear nuestro primer proyecto. Para esto, debemos dar clic en File -&gt; New Project para que nos aparezca una ventana como la siguiente. Figura 1.4: Ventana para crear un nuevo proyecto a partir de distintas opciones: Nuevo directorio, directorio existente y versión de control. Creamos un nuevo directorio que se guarda por defecto en la carpeta de Documentos de nuestro ordenador. Aunque R normalmente no tiene problemas al leer archivos con espacio, se recomienda no dejar espacios en los nombres de nuestros proyectos. Una vez creado nuestro proyecto, vamos a crear un nuevo archivo script tecleando Ctrl + Shift + N. Deberíamos tener un ambiente de trabajo más o menos así. Figura 1.5: Espacio de trabajo de RStudio tras abrir un nuevo proyecto. Es recomendable guardar nuestro script en la misma carpeta del proyecto, así como las bases de datos y demás archivos que vayamos a utilizar. Para saber cuál es la carpeta de nuestro directorio de trabajo, podemos utilizar la función getwd(). getwd() ## [1] &quot;O:/Tesis/R/Webpage/imalejandrorg.github.io/Curso_R_basico&quot; Para cambiar el directorio de trabajo, simplemente utilizamos la función setwd() con la dirección de la carpeta que queremos establecer como nuevo directorio. setwd(&quot;O:/Documentos/R_Basico&quot;) getwd() ## [1] &quot;O:/Documentos/R_Basico&quot; De esta manera el directorio de nuestro proyecto será la dirección que asignemos. Para guardar nuestro script simplemente hacemos clic en icono del disquete o con las teclas Ctrl + S. Recuerda que es recomendable guardar el script en la misma carpeta que nuestro proyecto. 1.3 Objetos y variables Existen en total 6 tipos distintos de objetos: Vector: Es uno de los elementos básicos. Existen distintos de vectores, los cuales pueden ser: lógicos, integers, caracteres y complejos. Lista: Son objetos que contienen distintos elementos que pueden incluir strings, números, vectores e incluso listas anidadas, así como matrices y o funciones como elementos. Matriz: Objetos arreglados en un espacio bidimensional. Un requisito es que contengan elementos del mismo tipo. Usualmente las usamos para realizar operaciones matemáticas. Array: Para almacenar datos en más de dos dimensiones. Factor: Son objetos que se utilizan para para categorizar y almacenar datos en ciertos niveles. Pueden ser strings o integers. Son usados frecuentemente en análisis estadísticos. Dataframe: Es una estructuración de datos en dos dimensiones, donde cada columna consiste del valor de una variable y cada fila consiste de un conjunto de valores de las columnas. Figura 1.6: Tipos de datos principales. Para que un comando que queramos ejecutar permanezca almacenado, debemos de crear una variable. La manera en la que R hace esto es a través de los símbolos &lt;- o = (cuyo atajo de escritura es Alt + -). Por ejemplo, si queremos realizar una suma de 5 + 5 pondríamos el siguiente código en la consola. 5 + 5 ## [1] 10 Sin embargo, si queremos almacenar este resultado necesitamos nombrar a una variable con este resultado. Por ejemplo, una variable llamada suma. Esta variable será un vector de tipo integer, que consisten de números con los que podemos realizar operaciones. suma &lt;- 5 + 5 suma ## [1] 10 Encontraremos una variable llamada suma en nuestro Environment en el panel superior derecho. Figura 1.7: Panel Environment en el cual podremos encontrar las variables que vayamos generando. Palabras o letras tienen que ser encomilladas para poder trabajar con ellas. letraA &lt;- &quot;A&quot; Figura 1.8: Tras definir la variable A esta se suma a la ventana de Environment. De nuevo se agregará esta variable a nuestro Environment. Esta variable, letraA corresponde a otro vector, sin embargo, a diferencia de los integers, esta variable corresponde a un string o caracter. No sirven para realizar operaciones matemáticas. Si por ejemplo, hiciéramos una variable de la siguiente manera. num5 &lt;- &quot;5&quot; Estaríamos creando un caracter, no un integer, por lo que no podríamos realizar operaciones con esta variable mucho cuidado con las comillas. Para corroborar el tipo de dato que tenemos podemos utilizar la función class(x) donde x es el nombre de nuestra variable. class(letraA) ## [1] &quot;character&quot; class(suma) ## [1] &quot;numeric&quot; class(num5) ## [1] &quot;character&quot; Para los análisis de datos de naturaleza biológica normalmente se trabaja con matrices de datos con múltiples variables (tanto caracteres, como valores numéricos) que en R corresponden a un data frame. Por ejemplo, los datos de una matriz llamada dune del paquete vegan son una variable de este tipo. data(&quot;dune&quot;) class(dune) ## [1] &quot;data.frame&quot; Tabla 1.1: Datos de la variable dune del paquete vegan. Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu Cirsarve Comapalu Eleopalu Elymrepe Empenigr Hyporadi Juncarti Juncbufo Lolipere Planlanc Poaprat Poatriv Ranuflam Rumeacet Sagiproc Salirepe Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp 1 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 7 0 4 2 0 0 0 0 0 0 0 0 0 0 3 0 0 2 0 3 4 0 0 0 0 4 0 0 0 0 5 0 4 7 0 0 0 0 5 0 5 0 0 0 0 4 0 7 0 2 0 0 0 0 0 4 0 0 0 0 6 0 5 6 0 0 0 0 2 0 2 0 2 0 0 8 0 2 0 2 3 0 2 0 0 4 0 0 0 0 5 0 4 5 0 0 5 0 2 0 1 0 2 0 2 0 0 0 4 2 2 0 0 0 0 4 0 0 0 0 2 5 2 6 0 5 0 0 3 2 2 0 2 0 2 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 6 5 3 4 0 6 0 0 3 5 5 0 6 0 2 0 0 0 2 0 2 0 0 0 0 0 0 0 0 2 6 5 4 5 0 3 0 0 3 2 2 0 2 0 0 4 0 5 0 0 0 0 0 0 4 0 0 0 4 0 4 0 4 4 2 0 2 0 3 0 2 0 2 0 0 3 0 3 0 0 0 0 0 0 0 6 0 0 4 4 2 0 4 5 0 2 2 0 2 0 3 0 2 0 4 0 0 0 4 2 4 0 0 0 0 0 0 0 0 0 6 3 4 4 0 0 0 0 3 0 6 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 7 3 4 0 0 0 2 0 5 0 3 2 4 0 0 4 0 8 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 4 0 2 4 0 2 0 3 0 4 0 0 5 0 5 0 0 0 1 0 0 0 0 0 0 0 3 0 0 2 9 2 0 2 0 2 0 2 0 0 0 0 4 0 0 0 0 0 0 0 2 4 0 0 0 0 0 0 0 0 0 2 0 0 0 2 0 6 0 0 4 0 4 0 0 0 0 0 0 0 2 5 0 0 0 3 0 0 0 0 0 2 0 0 0 2 0 1 0 4 0 0 7 0 4 0 0 0 0 0 0 8 0 0 0 3 0 0 0 0 2 2 0 0 0 0 0 0 0 4 3 2 0 2 0 4 0 0 0 0 0 0 0 0 2 0 0 0 2 1 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 3 3 0 0 0 0 3 5 0 2 1 6 0 0 0 3 0 4 0 0 0 0 0 0 0 2 5 0 0 0 0 0 0 0 0 3 3 6 0 2 0 3 0 0 5 0 0 0 0 0 0 0 0 4 0 0 0 4 0 0 0 0 0 4 0 0 5 2 0 0 0 4 3 1.4 Instalar paquetes Una de las herramientas más útiles de R es la instalación de paquetes. No tenemos la necesidad de escribir nuestras propias funciones cada que queramos realizar algún análisis. Por ejemplo, uno de los paquetes más utilizados es vegan, útil para realizar análisis ecológicos. Para instalar los paquetes escribimos la siguiente función en la consola. install.packages(&quot;vegan&quot;) Tenemos que conocer el nombre exacto del paquete, en este caso, vegan está escrito con una v minúscula. Tenemos que entender que instalar un paquete no es lo mismo que llamarlo. Para esto último utilizamos la siguiente función. library(vegan) Vemos que en esta ocasión llamamos al paquete sin necesidad de poner el entrecomillado. En ocasiones la función install.package() puede arrojarnos error. Una alternativa es utilizar la ventana de Packages del panel inferior derecho. Figura 1.9: Ventana de Packages donde podremos encontrar los paquetes instalados. Damos clic en Install y escribimos el nombre del paquete. Personalmente prefiero instalar mis paquetes de esta manera, ya que otras a veces pueden darnos errores. Figura 1.10: Al hacer clic sobre el botón Install en la ventana de Packages aparece esta pequeña ventana donde podremos buscar la librería deseada. Nos irán apareciendo opciones con el nombre del paquete de interés. Lo seleccionamos y damos clic en Install. Figura 1.11: En este caso, solo con escribir las primeras letras del paquete deseado se despliega una lista de librerías con nombres similares. Y listo, tendremos nuestro paquete en RStudio. Podemos ver los paquetes que tenemos instalados en la ventana Packages. 1.5 Importar datos a R La mayor parte del tiempo lo que queremos hacer es importar nuestros propios datos a R. En este caso utilizaremos las matrices de datos presentadas en el libro de Palacio et al. (2020). Utilizaremos una base de datos de aves del capítulo 6. Descargar: Aves.txt Una vez que tenemos nuestra base de datos en la carpeta de nuestro proyecto, la importamos a través de la función read.table(). Aves &lt;- read.table(&quot;Aves.txt&quot;, header = TRUE) View(Aves) Tabla 1.2: Base de datos de aves sitio estacion ambiente agebad amabra rupmag spimag chlluc colmel patpic cycguj elapar furruf geoaeq ictcay lepang mimsat molbon myimac myimon pacpol phastr pitsul poldum poomel rossoc sicfla siclut spocae synspi troaed turruf viroli zenaur zoncap 2 inv bosque 1 0 0 0 0 2 2 1 0 6 1 1 1 1 0 0 0 0 0 2 0 0 1 0 0 0 0 5 3 0 2 5 2 oto bosque 1 0 1 0 0 3 2 0 0 2 0 0 2 5 0 0 0 0 0 3 0 0 1 0 0 0 0 3 4 0 1 0 2 pri bosque 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 4 0 1 6 2 ver bosque 1 0 0 0 0 3 0 0 1 6 0 0 4 0 0 0 0 1 1 6 0 0 0 0 0 0 0 1 1 0 8 2 3 inv arbustal 1 0 0 0 0 1 0 0 0 6 0 0 1 0 3 0 0 0 1 2 0 0 3 0 0 0 2 6 3 0 2 6 3 oto arbustal 0 0 0 0 0 0 0 0 0 8 0 0 2 0 0 0 0 0 1 3 0 0 3 0 0 0 0 3 6 0 1 1 3 pri arbustal 0 0 0 0 0 2 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 4 3 3 ver arbustal 3 0 0 0 2 0 0 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 1 0 5 4 4 inv arbustal 8 0 0 10 0 0 0 0 0 1 2 2 1 0 1 0 14 0 2 1 0 2 0 0 0 0 1 3 1 0 4 6 4 oto arbustal 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 3 3 0 0 0 0 0 4 3 0 0 1 4 pri arbustal 0 0 0 0 0 0 0 0 0 0 3 0 0 0 2 0 0 0 1 2 0 0 0 0 4 0 0 4 1 0 1 4 4 ver arbustal 1 0 0 0 0 0 0 0 0 3 1 0 0 0 0 1 0 0 1 2 0 0 0 0 0 3 2 2 0 0 0 4 5 inv bosque 0 0 0 0 0 3 2 3 0 4 1 2 1 0 1 0 0 0 0 9 0 0 0 0 0 0 0 2 0 0 2 3 5 oto bosque 37 0 2 0 0 2 2 0 0 2 0 0 1 0 0 0 0 0 0 3 2 0 0 0 0 0 0 3 2 0 0 3 5 pri bosque 0 0 0 1 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 3 1 1 4 5 ver bosque 10 0 2 0 0 2 0 2 2 0 0 0 0 0 0 1 0 3 0 5 0 0 0 0 0 0 1 1 2 2 1 5 6 inv bosque 0 0 5 0 0 1 2 1 0 4 0 0 1 0 0 0 0 0 0 8 2 0 0 0 0 0 0 0 3 0 4 6 6 oto bosque 0 1 4 0 0 0 2 0 0 3 0 0 1 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 2 0 6 pri bosque 2 0 2 0 0 0 0 1 4 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 2 2 0 3 6 ver bosque 0 4 3 0 1 1 0 0 2 1 0 0 1 0 0 4 0 4 0 1 0 0 0 0 0 0 0 0 1 1 4 3 7 inv bosque 0 0 1 0 1 0 6 0 2 0 0 1 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 16 0 4 2 7 oto bosque 0 0 0 0 0 1 2 1 0 2 0 2 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 3 0 1 0 7 pri bosque 0 0 1 0 0 0 0 0 3 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 2 2 2 3 7 ver bosque 1 0 0 0 0 1 7 0 3 2 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 1 0 5 2 8 inv arbustal 0 0 0 0 0 0 0 2 0 1 1 0 0 2 2 0 0 0 0 3 0 0 1 2 2 0 0 1 1 0 3 9 8 oto arbustal 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 3 8 pri arbustal 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 4 0 0 0 4 2 1 0 1 0 0 0 8 8 ver arbustal 0 0 0 0 1 0 0 0 2 2 0 0 1 0 0 0 0 0 0 2 1 0 0 0 0 7 1 4 4 0 0 5 9 inv arbustal 0 0 0 0 0 4 0 0 0 0 0 0 0 0 1 0 3 0 0 0 1 1 0 0 4 0 0 5 1 0 2 13 9 oto arbustal 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 6 0 1 2 9 pri arbustal 0 0 0 0 0 0 0 0 0 0 3 0 0 0 1 0 0 0 0 2 0 0 0 0 5 0 0 0 1 0 0 6 9 ver arbustal 3 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 1 0 0 0 0 3 11 6 1 2 0 0 0 31 10 inv arbustal 0 0 0 1 0 0 0 0 0 0 1 0 2 0 8 0 0 0 2 4 0 0 0 0 3 0 1 0 1 0 1 14 10 oto arbustal 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 3 0 0 1 0 0 0 3 0 4 0 0 7 10 pri arbustal 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 10 ver arbustal 1 0 0 0 0 1 0 0 0 7 2 0 0 0 0 0 0 0 0 2 0 0 0 0 3 8 1 2 0 0 0 12 También podemos importar archivos .csv utilizando la función read.csv(). Aves_csv &lt;- read.csv(&quot;Aves.csv&quot;, header = TRUE) Así obtendríamos la misma tabla anterior. En caso de que queramos leer archivos excel, podemos hacerlo utilizando la librería readxl. En caso de ya tener instalado el paquete no es necesario que pongan la función install.packages(\"readxl\"), al ya tenerlo instalado yo omití esta parte poniéndole el símbolo de gato #. #install.packages(&quot;readxl&quot;) library(readxl) Aves_xlsx &lt;- read_excel(&quot;Aves.xlsx&quot;) Estas tres formas de importar los datos nos producen la misma matriz. Sin embargo podemos ver que la clase del archivo importado desde excel pertenece a una subclase de los archivos de tipo data frame llamada tibble. Sin embargo, se recomienda que se cambie el tipo de archivo a solamente data.frame. Para hacer esto podemos escribir el siguiente código: Aves_xlsx &lt;- as.data.frame(Aves_xlsx) class(Aves_xlsx) ## [1] &quot;data.frame&quot; También se puede importar desde el botón Import Dataset que aparece en la ventana de nuestro Environment. Figura 1.12: En el panel Environment podemos hacer clic sobre la ventanaImport Dataset para importar archivos de distintos formatos. De igual manera se recomienda copiar el código al script para saber exactamente qué hacemos en cada paso. 1.6 Comentarios Los comentarios nos permiten recordar la utilidad de algunas líneas de código, funciones o argumentos en particular, solo basta agregarlos a nuestro script tecleando el símbolo de gato o hashtag (#). Cualquiera que sea el texto escrito después del símbolo no será leído al momento de correr el programa y podemos consultaro en cualquier momento en la pantalla. #Esta función sirve para importar archivos. Aves &lt;- read.table(&quot;Aves.txt&quot;, header = TRUE) Podemos ver como al poner un # antes de una línea de código esta cambia a color gris. Lo que sea que realice esta línea no será leída. 1.7 Exportar datos En algunas ocasiones queremos trabajar con otro software o queremos exportar nuestra tabla modificada a Excel. Para hacer esto, utilizamos la función write.table(), por ejemplo: #Filtramos nuestro archivo para tener solo las abundancias. Abun &lt;- Aves[,4:35] #Exportamos nuestro archivo en formato .csv write.table(Abun, file = &quot;Abundancias.csv&quot;, sep = &quot;,&quot;, row.names = FALSE) De esta manera omitimos los nombres de la columnas y de las filas, además especificamos que queremos un documento en formato .csv, y que la separación sea por comas. Si no especificamos la ruta, guardaremos nuestro archivo en nuestro directorio de trabajo, si queremos guardar el archivo en un directorio específico, tendremos que dar la ruta antes de poner el nombre. write.table(Abun, file = &quot;O:/Documentos/R_Basico/Lección_1/Abundancias.csv&quot;, sep = &quot;,&quot;, row.names = FALSE) Como podemos ver, el archivo fue escrito en la dirección indicada. Figura 1.13: Dirección a en la cual hemos decidido guardar el archivo Abundancias.csv. Figura 1.14: Archivo Abundancias.csv visto en Excel. 1.8 Pedir ayuda En caso de que no sepamos que argumentos van en alguna función, podemos pedir ayuda en la consola utilizando el símbolo de interrogación ? seguido de la función sobre la cuál tengamos una duda. ?specaccum Cuando nosotros escribimos esto, se abrirá la ventana de Help en el panel inferior derecho y nos mostrará una pequeña descripción de la función, así como sus usos y qué argumentos utilizar. En ocasiones incluso podemos encontrar ejemplos. Figura 1.15: Ventana de ayuda en la pestaña Help para la función que en este caso fue ?specaccum. "]]
